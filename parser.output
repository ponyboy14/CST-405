Terminals unused in grammar

    DOT
    QUOTE
    FLOAT
    WRITELN
    READ


State 0 conflicts: 5 shift/reduce
State 8 conflicts: 5 shift/reduce, 3 reduce/reduce
State 12 conflicts: 4 shift/reduce
State 87 conflicts: 5 shift/reduce
State 90 conflicts: 5 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: VarDecl
    5     | Function
    6     | StmtList
    7     | ArrayDecl

    8 VarDecl: TYPE ID SEMICOLON

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON

   10 StmtList: ε
   11         | Stmt StmtList

   12 Stmt: SEMICOLON
   13     | Expr SEMICOLON
   14     | IfStmt

   15 OPERATION: LeftPar OPERATION RightPar
   16          | NUMBER PLUS_OP OPERATION
   17          | NUMBER SUB_OP OPERATION
   18          | NUMBER MULT_OP OPERATION
   19          | NUMBER DIV_OP OPERATION
   20          | NUMBER CAR_OP OPERATION
   21          | ID PLUS_OP OPERATION
   22          | ID SUB_OP OPERATION
   23          | ID MULT_OP OPERATION
   24          | ID DIV_OP OPERATION
   25          | ID CAR_OP OPERATION
   26          | LeftPar OPERATION RightPar PLUS_OP OPERATION
   27          | NUMBER
   28          | ID

   29 FuncBlock: LeftCurly DeclList RETURN ID SEMICOLON RightCurly

   30 Block: LeftCurly DeclList RightCurly

   31 IfStmt: IF LeftPar Cond RightPar Block

   32 Cond: OPERATION LogOp OPERATION

   33 LogOp: ">="
   34      | "<="
   35      | "<"
   36      | ">"
   37      | "=="
   38      | "!="

   39 ParamDecl: ε
   40          | TYPE ID COMMA ParamDecl
   41          | ParamDeclEnd

   42 ParamDeclEnd: TYPE ID

   43 Function: TYPE ID LeftPar ParamDecl RightPar FuncBlock

   44 Expr: ID EQ OPERATION
   45     | ID EQ CHAR
   46     | ID LeftBracket NUMBER RightBracket EQ OPERATION
   47     | ID EQ FuncCall
   48     | WRITE ID
   49     | FuncCall

   50 CallParam: ε
   51          | ID COMMA CallParam
   52          | CallParamEnd

   53 CallParamEnd: ID

   54 @1: ε

   55 FuncCall: ID LeftPar CallParam @1 RightPar


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 8 9 40 42 43
    ID <string> (259) 8 9 21 22 23 24 25 28 29 40 42 43 44 45 46 47 48 51 53 55
    IF <string> (260) 31
    SEMICOLON <char> (261) 8 9 12 13 29
    EQ <char> (262) 44 45 46 47
    PLUS_OP <char> (263) 16 21 26
    SUB_OP <char> (264) 17 22
    MULT_OP <char> (265) 18 23
    DIV_OP <char> (266) 19 24
    CAR_OP <char> (267) 20 25
    LeftPar <char> (268) 15 26 31 43 55
    RightPar <char> (269) 15 26 31 43 55
    LeftCurly <char> (270) 29 30
    RightCurly <char> (271) 29 30
    LeftBracket <char> (272) 9 46
    RightBracket <char> (273) 9 46
    COMMA <char> (274) 40 51
    DOT <char> (275)
    CHAR <char> (276) 45
    QUOTE <char> (277)
    NUMBER <number> (278) 9 16 17 18 19 20 27 46
    FLOAT <number> (279)
    WRITE <string> (280) 48
    WRITELN <string> (281)
    READ <string> (282)
    RETURN <string> (283) 29
    ">=" (284) 33
    "<=" (285) 34
    "<" (286) 35
    ">" (287) 36
    "==" (288) 37
    "!=" (289) 38


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    Program <ast> (36)
        on left: 1
        on right: 0
    DeclList <ast> (37)
        on left: 2 3
        on right: 1 2 29 30
    Decl <ast> (38)
        on left: 4 5 6 7
        on right: 2 3
    VarDecl <ast> (39)
        on left: 8
        on right: 4
    ArrayDecl <ast> (40)
        on left: 9
        on right: 7
    StmtList <ast> (41)
        on left: 10 11
        on right: 6 11
    Stmt <ast> (42)
        on left: 12 13 14
        on right: 11
    OPERATION <ast> (43)
        on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28
        on right: 15 16 17 18 19 20 21 22 23 24 25 26 32 44 46
    FuncBlock <ast> (44)
        on left: 29
        on right: 43
    Block <ast> (45)
        on left: 30
        on right: 31
    IfStmt (46)
        on left: 31
        on right: 14
    Cond (47)
        on left: 32
        on right: 31
    LogOp (48)
        on left: 33 34 35 36 37 38
        on right: 32
    ParamDecl <ast> (49)
        on left: 39 40 41
        on right: 40 43
    ParamDeclEnd <ast> (50)
        on left: 42
        on right: 41
    Function <ast> (51)
        on left: 43
        on right: 5
    Expr <ast> (52)
        on left: 44 45 46 47 48 49
        on right: 13
    CallParam <ast> (53)
        on left: 50 51 52
        on right: 51 55
    CallParamEnd <ast> (54)
        on left: 53
        on right: 52
    FuncCall <ast> (55)
        on left: 55
        on right: 47 49
    @1 (56)
        on left: 54
        on right: 55


State 0

    0 $accept: • Program $end

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    IF         shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5

    TYPE       [reduce using rule 10 (StmtList)]
    ID         [reduce using rule 10 (StmtList)]
    IF         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    $default   reduce using rule 10 (StmtList)

    Program    go to state 6
    DeclList   go to state 7
    Decl       go to state 8
    VarDecl    go to state 9
    ArrayDecl  go to state 10
    StmtList   go to state 11
    Stmt       go to state 12
    IfStmt     go to state 13
    Function   go to state 14
    Expr       go to state 15
    FuncCall   go to state 16


State 1

    8 VarDecl: TYPE • ID SEMICOLON
    9 ArrayDecl: TYPE • ID LeftBracket NUMBER RightBracket SEMICOLON
   43 Function: TYPE • ID LeftPar ParamDecl RightPar FuncBlock

    ID  shift, and go to state 17


State 2

   44 Expr: ID • EQ OPERATION
   45     | ID • EQ CHAR
   46     | ID • LeftBracket NUMBER RightBracket EQ OPERATION
   47     | ID • EQ FuncCall
   55 FuncCall: ID • LeftPar CallParam @1 RightPar

    EQ           shift, and go to state 18
    LeftPar      shift, and go to state 19
    LeftBracket  shift, and go to state 20


State 3

   31 IfStmt: IF • LeftPar Cond RightPar Block

    LeftPar  shift, and go to state 21


State 4

   12 Stmt: SEMICOLON •

    $default  reduce using rule 12 (Stmt)


State 5

   48 Expr: WRITE • ID

    ID  shift, and go to state 22


State 6

    0 $accept: Program • $end

    $end  shift, and go to state 23


State 7

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 8

    2 DeclList: Decl • DeclList
    3         | Decl •

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    IF         shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5

    $end        reduce using rule 3 (DeclList)
    $end        [reduce using rule 10 (StmtList)]
    TYPE        [reduce using rule 10 (StmtList)]
    ID          [reduce using rule 10 (StmtList)]
    IF          [reduce using rule 10 (StmtList)]
    SEMICOLON   [reduce using rule 10 (StmtList)]
    RightCurly  reduce using rule 3 (DeclList)
    RightCurly  [reduce using rule 10 (StmtList)]
    WRITE       [reduce using rule 10 (StmtList)]
    RETURN      reduce using rule 3 (DeclList)
    RETURN      [reduce using rule 10 (StmtList)]
    $default    reduce using rule 3 (DeclList)

    DeclList   go to state 24
    Decl       go to state 8
    VarDecl    go to state 9
    ArrayDecl  go to state 10
    StmtList   go to state 11
    Stmt       go to state 12
    IfStmt     go to state 13
    Function   go to state 14
    Expr       go to state 15
    FuncCall   go to state 16


State 9

    4 Decl: VarDecl •

    $default  reduce using rule 4 (Decl)


State 10

    7 Decl: ArrayDecl •

    $default  reduce using rule 7 (Decl)


State 11

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 12

   11 StmtList: Stmt • StmtList

    ID         shift, and go to state 2
    IF         shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5

    ID         [reduce using rule 10 (StmtList)]
    IF         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    $default   reduce using rule 10 (StmtList)

    StmtList  go to state 25
    Stmt      go to state 12
    IfStmt    go to state 13
    Expr      go to state 15
    FuncCall  go to state 16


State 13

   14 Stmt: IfStmt •

    $default  reduce using rule 14 (Stmt)


State 14

    5 Decl: Function •

    $default  reduce using rule 5 (Decl)


State 15

   13 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 26


State 16

   49 Expr: FuncCall •

    $default  reduce using rule 49 (Expr)


State 17

    8 VarDecl: TYPE ID • SEMICOLON
    9 ArrayDecl: TYPE ID • LeftBracket NUMBER RightBracket SEMICOLON
   43 Function: TYPE ID • LeftPar ParamDecl RightPar FuncBlock

    SEMICOLON    shift, and go to state 27
    LeftPar      shift, and go to state 28
    LeftBracket  shift, and go to state 29


State 18

   44 Expr: ID EQ • OPERATION
   45     | ID EQ • CHAR
   47     | ID EQ • FuncCall

    ID       shift, and go to state 30
    LeftPar  shift, and go to state 31
    CHAR     shift, and go to state 32
    NUMBER   shift, and go to state 33

    OPERATION  go to state 34
    FuncCall   go to state 35


State 19

   55 FuncCall: ID LeftPar • CallParam @1 RightPar

    ID  shift, and go to state 36

    $default  reduce using rule 50 (CallParam)

    CallParam     go to state 37
    CallParamEnd  go to state 38


State 20

   46 Expr: ID LeftBracket • NUMBER RightBracket EQ OPERATION

    NUMBER  shift, and go to state 39


State 21

   31 IfStmt: IF LeftPar • Cond RightPar Block

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 41
    Cond       go to state 42


State 22

   48 Expr: WRITE ID •

    $default  reduce using rule 48 (Expr)


State 23

    0 $accept: Program $end •

    $default  accept


State 24

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 25

   11 StmtList: Stmt StmtList •

    $default  reduce using rule 11 (StmtList)


State 26

   13 Stmt: Expr SEMICOLON •

    $default  reduce using rule 13 (Stmt)


State 27

    8 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 8 (VarDecl)


State 28

   43 Function: TYPE ID LeftPar • ParamDecl RightPar FuncBlock

    TYPE  shift, and go to state 43

    $default  reduce using rule 39 (ParamDecl)

    ParamDecl     go to state 44
    ParamDeclEnd  go to state 45


State 29

    9 ArrayDecl: TYPE ID LeftBracket • NUMBER RightBracket SEMICOLON

    NUMBER  shift, and go to state 46


State 30

   21 OPERATION: ID • PLUS_OP OPERATION
   22          | ID • SUB_OP OPERATION
   23          | ID • MULT_OP OPERATION
   24          | ID • DIV_OP OPERATION
   25          | ID • CAR_OP OPERATION
   28          | ID •
   55 FuncCall: ID • LeftPar CallParam @1 RightPar

    PLUS_OP  shift, and go to state 47
    SUB_OP   shift, and go to state 48
    MULT_OP  shift, and go to state 49
    DIV_OP   shift, and go to state 50
    CAR_OP   shift, and go to state 51
    LeftPar  shift, and go to state 19

    $default  reduce using rule 28 (OPERATION)


State 31

   15 OPERATION: LeftPar • OPERATION RightPar
   26          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 52


State 32

   45 Expr: ID EQ CHAR •

    $default  reduce using rule 45 (Expr)


State 33

   16 OPERATION: NUMBER • PLUS_OP OPERATION
   17          | NUMBER • SUB_OP OPERATION
   18          | NUMBER • MULT_OP OPERATION
   19          | NUMBER • DIV_OP OPERATION
   20          | NUMBER • CAR_OP OPERATION
   27          | NUMBER •

    PLUS_OP  shift, and go to state 53
    SUB_OP   shift, and go to state 54
    MULT_OP  shift, and go to state 55
    DIV_OP   shift, and go to state 56
    CAR_OP   shift, and go to state 57

    $default  reduce using rule 27 (OPERATION)


State 34

   44 Expr: ID EQ OPERATION •

    $default  reduce using rule 44 (Expr)


State 35

   47 Expr: ID EQ FuncCall •

    $default  reduce using rule 47 (Expr)


State 36

   51 CallParam: ID • COMMA CallParam
   53 CallParamEnd: ID •

    COMMA  shift, and go to state 58

    $default  reduce using rule 53 (CallParamEnd)


State 37

   55 FuncCall: ID LeftPar CallParam • @1 RightPar

    $default  reduce using rule 54 (@1)

    @1  go to state 59


State 38

   52 CallParam: CallParamEnd •

    $default  reduce using rule 52 (CallParam)


State 39

   46 Expr: ID LeftBracket NUMBER • RightBracket EQ OPERATION

    RightBracket  shift, and go to state 60


State 40

   21 OPERATION: ID • PLUS_OP OPERATION
   22          | ID • SUB_OP OPERATION
   23          | ID • MULT_OP OPERATION
   24          | ID • DIV_OP OPERATION
   25          | ID • CAR_OP OPERATION
   28          | ID •

    PLUS_OP  shift, and go to state 47
    SUB_OP   shift, and go to state 48
    MULT_OP  shift, and go to state 49
    DIV_OP   shift, and go to state 50
    CAR_OP   shift, and go to state 51

    $default  reduce using rule 28 (OPERATION)


State 41

   32 Cond: OPERATION • LogOp OPERATION

    ">="  shift, and go to state 61
    "<="  shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "=="  shift, and go to state 65
    "!="  shift, and go to state 66

    LogOp  go to state 67


State 42

   31 IfStmt: IF LeftPar Cond • RightPar Block

    RightPar  shift, and go to state 68


State 43

   40 ParamDecl: TYPE • ID COMMA ParamDecl
   42 ParamDeclEnd: TYPE • ID

    ID  shift, and go to state 69


State 44

   43 Function: TYPE ID LeftPar ParamDecl • RightPar FuncBlock

    RightPar  shift, and go to state 70


State 45

   41 ParamDecl: ParamDeclEnd •

    $default  reduce using rule 41 (ParamDecl)


State 46

    9 ArrayDecl: TYPE ID LeftBracket NUMBER • RightBracket SEMICOLON

    RightBracket  shift, and go to state 71


State 47

   21 OPERATION: ID PLUS_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 72


State 48

   22 OPERATION: ID SUB_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 73


State 49

   23 OPERATION: ID MULT_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 74


State 50

   24 OPERATION: ID DIV_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 75


State 51

   25 OPERATION: ID CAR_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 76


State 52

   15 OPERATION: LeftPar OPERATION • RightPar
   26          | LeftPar OPERATION • RightPar PLUS_OP OPERATION

    RightPar  shift, and go to state 77


State 53

   16 OPERATION: NUMBER PLUS_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 78


State 54

   17 OPERATION: NUMBER SUB_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 79


State 55

   18 OPERATION: NUMBER MULT_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 80


State 56

   19 OPERATION: NUMBER DIV_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 81


State 57

   20 OPERATION: NUMBER CAR_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 82


State 58

   51 CallParam: ID COMMA • CallParam

    ID  shift, and go to state 36

    $default  reduce using rule 50 (CallParam)

    CallParam     go to state 83
    CallParamEnd  go to state 38


State 59

   55 FuncCall: ID LeftPar CallParam @1 • RightPar

    RightPar  shift, and go to state 84


State 60

   46 Expr: ID LeftBracket NUMBER RightBracket • EQ OPERATION

    EQ  shift, and go to state 85


State 61

   33 LogOp: ">=" •

    $default  reduce using rule 33 (LogOp)


State 62

   34 LogOp: "<=" •

    $default  reduce using rule 34 (LogOp)


State 63

   35 LogOp: "<" •

    $default  reduce using rule 35 (LogOp)


State 64

   36 LogOp: ">" •

    $default  reduce using rule 36 (LogOp)


State 65

   37 LogOp: "==" •

    $default  reduce using rule 37 (LogOp)


State 66

   38 LogOp: "!=" •

    $default  reduce using rule 38 (LogOp)


State 67

   32 Cond: OPERATION LogOp • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 86


State 68

   31 IfStmt: IF LeftPar Cond RightPar • Block

    LeftCurly  shift, and go to state 87

    Block  go to state 88


State 69

   40 ParamDecl: TYPE ID • COMMA ParamDecl
   42 ParamDeclEnd: TYPE ID •

    COMMA  shift, and go to state 89

    $default  reduce using rule 42 (ParamDeclEnd)


State 70

   43 Function: TYPE ID LeftPar ParamDecl RightPar • FuncBlock

    LeftCurly  shift, and go to state 90

    FuncBlock  go to state 91


State 71

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket • SEMICOLON

    SEMICOLON  shift, and go to state 92


State 72

   21 OPERATION: ID PLUS_OP OPERATION •

    $default  reduce using rule 21 (OPERATION)


State 73

   22 OPERATION: ID SUB_OP OPERATION •

    $default  reduce using rule 22 (OPERATION)


State 74

   23 OPERATION: ID MULT_OP OPERATION •

    $default  reduce using rule 23 (OPERATION)


State 75

   24 OPERATION: ID DIV_OP OPERATION •

    $default  reduce using rule 24 (OPERATION)


State 76

   25 OPERATION: ID CAR_OP OPERATION •

    $default  reduce using rule 25 (OPERATION)


State 77

   15 OPERATION: LeftPar OPERATION RightPar •
   26          | LeftPar OPERATION RightPar • PLUS_OP OPERATION

    PLUS_OP  shift, and go to state 93

    $default  reduce using rule 15 (OPERATION)


State 78

   16 OPERATION: NUMBER PLUS_OP OPERATION •

    $default  reduce using rule 16 (OPERATION)


State 79

   17 OPERATION: NUMBER SUB_OP OPERATION •

    $default  reduce using rule 17 (OPERATION)


State 80

   18 OPERATION: NUMBER MULT_OP OPERATION •

    $default  reduce using rule 18 (OPERATION)


State 81

   19 OPERATION: NUMBER DIV_OP OPERATION •

    $default  reduce using rule 19 (OPERATION)


State 82

   20 OPERATION: NUMBER CAR_OP OPERATION •

    $default  reduce using rule 20 (OPERATION)


State 83

   51 CallParam: ID COMMA CallParam •

    $default  reduce using rule 51 (CallParam)


State 84

   55 FuncCall: ID LeftPar CallParam @1 RightPar •

    $default  reduce using rule 55 (FuncCall)


State 85

   46 Expr: ID LeftBracket NUMBER RightBracket EQ • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 94


State 86

   32 Cond: OPERATION LogOp OPERATION •

    $default  reduce using rule 32 (Cond)


State 87

   30 Block: LeftCurly • DeclList RightCurly

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    IF         shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5

    TYPE       [reduce using rule 10 (StmtList)]
    ID         [reduce using rule 10 (StmtList)]
    IF         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    $default   reduce using rule 10 (StmtList)

    DeclList   go to state 95
    Decl       go to state 8
    VarDecl    go to state 9
    ArrayDecl  go to state 10
    StmtList   go to state 11
    Stmt       go to state 12
    IfStmt     go to state 13
    Function   go to state 14
    Expr       go to state 15
    FuncCall   go to state 16


State 88

   31 IfStmt: IF LeftPar Cond RightPar Block •

    $default  reduce using rule 31 (IfStmt)


State 89

   40 ParamDecl: TYPE ID COMMA • ParamDecl

    TYPE  shift, and go to state 43

    $default  reduce using rule 39 (ParamDecl)

    ParamDecl     go to state 96
    ParamDeclEnd  go to state 45


State 90

   29 FuncBlock: LeftCurly • DeclList RETURN ID SEMICOLON RightCurly

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    IF         shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5

    TYPE       [reduce using rule 10 (StmtList)]
    ID         [reduce using rule 10 (StmtList)]
    IF         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    $default   reduce using rule 10 (StmtList)

    DeclList   go to state 97
    Decl       go to state 8
    VarDecl    go to state 9
    ArrayDecl  go to state 10
    StmtList   go to state 11
    Stmt       go to state 12
    IfStmt     go to state 13
    Function   go to state 14
    Expr       go to state 15
    FuncCall   go to state 16


State 91

   43 Function: TYPE ID LeftPar ParamDecl RightPar FuncBlock •

    $default  reduce using rule 43 (Function)


State 92

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON •

    $default  reduce using rule 9 (ArrayDecl)


State 93

   26 OPERATION: LeftPar OPERATION RightPar PLUS_OP • OPERATION

    ID       shift, and go to state 40
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 33

    OPERATION  go to state 98


State 94

   46 Expr: ID LeftBracket NUMBER RightBracket EQ OPERATION •

    $default  reduce using rule 46 (Expr)


State 95

   30 Block: LeftCurly DeclList • RightCurly

    RightCurly  shift, and go to state 99


State 96

   40 ParamDecl: TYPE ID COMMA ParamDecl •

    $default  reduce using rule 40 (ParamDecl)


State 97

   29 FuncBlock: LeftCurly DeclList • RETURN ID SEMICOLON RightCurly

    RETURN  shift, and go to state 100


State 98

   26 OPERATION: LeftPar OPERATION RightPar PLUS_OP OPERATION •

    $default  reduce using rule 26 (OPERATION)


State 99

   30 Block: LeftCurly DeclList RightCurly •

    $default  reduce using rule 30 (Block)


State 100

   29 FuncBlock: LeftCurly DeclList RETURN • ID SEMICOLON RightCurly

    ID  shift, and go to state 101


State 101

   29 FuncBlock: LeftCurly DeclList RETURN ID • SEMICOLON RightCurly

    SEMICOLON  shift, and go to state 102


State 102

   29 FuncBlock: LeftCurly DeclList RETURN ID SEMICOLON • RightCurly

    RightCurly  shift, and go to state 103


State 103

   29 FuncBlock: LeftCurly DeclList RETURN ID SEMICOLON RightCurly •

    $default  reduce using rule 29 (FuncBlock)
