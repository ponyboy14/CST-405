Nonterminals useless in grammar

    FuncBlock


Terminals unused in grammar

    DOT
    QUOTE
    WRITELN
    READ
    RETURN
    BOOL
    TRUE
    FALSE


Rules useless in grammar

   68 FuncBlock: LeftCurly DeclList RETURN ID SEMICOLON RightCurly


State 0 conflicts: 6 shift/reduce
State 9 conflicts: 6 shift/reduce, 2 reduce/reduce
State 16 conflicts: 3 shift/reduce
State 59 conflicts: 6 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: VarDecl
    5     | Function
    6     | StmtList
    7     | ArrayDecl
    8     | ElseStmt
    9     | WhileStmt

   10 VarDecl: TYPE ID SEMICOLON

   11 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON

   12 WhileStmt: WHILE CONDITION Block

   13 $@1: ε

   14 IfStmt: IF CONDITION $@1 Block

   15 $@2: ε

   16 ElseStmt: IfStmt ELSE $@2 Block
   17         | IfStmt

   18 CONDITION: TestExpr TestOp TestExpr
   19          | LeftPar CONDITION RightPar

   20 TestExpr: ID
   21         | NUMBER

   22 TestOp: EQ_COND
   23       | GREATER
   24       | LESS
   25       | GREATER_EQ
   26       | LESS_EQ
   27       | NOT

   28 Block: LeftCurly DeclList RightCurly

   29 StmtList: ε
   30         | Stmt StmtList

   31 Stmt: SEMICOLON
   32     | Expr SEMICOLON

   33 OPERATION: LeftPar OPERATION RightPar
   34          | NUMBER PLUS_OP OPERATION
   35          | NUMBER SUB_OP OPERATION
   36          | NUMBER MULT_OP OPERATION
   37          | NUMBER DIV_OP OPERATION
   38          | NUMBER CAR_OP OPERATION
   39          | ID PLUS_OP OPERATION
   40          | ID SUB_OP OPERATION
   41          | ID MULT_OP OPERATION
   42          | ID DIV_OP OPERATION
   43          | ID CAR_OP OPERATION
   44          | LeftPar OPERATION RightPar PLUS_OP OPERATION
   45          | NUMBER
   46          | ID

   47 ParamDecl: ε
   48          | TYPE ID COMMA ParamDecl
   49          | ParamDeclEnd

   50 ParamDeclEnd: TYPE ID

   51 @3: ε

   52 @4: ε

   53 Function: TYPE ID LeftPar @3 ParamDecl @4 RightPar Block

   54 Expr: ID EQ OPERATION
   55     | ID EQ CHAR
   56     | ID EQ FLOAT
   57     | ID LeftBracket NUMBER RightBracket EQ OPERATION
   58     | ID LeftBracket NUMBER RightBracket EQ CHAR
   59     | ID LeftBracket NUMBER RightBracket EQ FLOAT
   60     | ID EQ FuncCall
   61     | WRITE ID
   62     | FuncCall

   63 CallParam: ε
   64          | ID COMMA CallParam
   65          | CallParamEnd

   66 CallParamEnd: ID

   67 FuncCall: ID LeftPar CallParam RightPar


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 10 11 48 50 53
    ID <string> (259) 10 11 20 39 40 41 42 43 46 48 50 53 54 55 56 57 58 59 60 61 64 66 67
    SEMICOLON <character> (260) 10 11 31 32
    EQ <string> (261) 54 55 56 57 58 59 60
    PLUS_OP <string> (262) 34 39 44
    SUB_OP <string> (263) 35 40
    MULT_OP <string> (264) 36 41
    DIV_OP <string> (265) 37 42
    CAR_OP <string> (266) 38 43
    LeftPar <string> (267) 19 33 44 53 67
    RightPar <character> (268) 19 33 44 53 67
    LeftCurly <string> (269) 28
    RightCurly <string> (270) 28
    LeftBracket <string> (271) 11 57 58 59
    RightBracket <string> (272) 11 57 58 59
    COMMA <string> (273) 48 64
    EQ_COND <string> (274) 22
    GREATER <string> (275) 23
    LESS <string> (276) 24
    GREATER_EQ <string> (277) 25
    LESS_EQ <string> (278) 26
    NOT <string> (279) 27
    DOT <string> (280)
    CHAR <string> (281) 55 58
    QUOTE <string> (282)
    NUMBER <number> (283) 11 21 34 35 36 37 38 45 57 58 59
    FLOAT <string> (284) 56 59
    WRITE <string> (285) 61
    WRITELN <string> (286)
    READ <string> (287)
    RETURN <string> (288)
    IF <string> (289) 14
    ELSE <string> (290) 16
    WHILE <string> (291) 12
    BOOL <string> (292)
    TRUE <string> (293)
    FALSE <string> (294)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    Program <ast> (41)
        on left: 1
        on right: 0
    DeclList <ast> (42)
        on left: 2 3
        on right: 1 2 28
    Decl <ast> (43)
        on left: 4 5 6 7 8 9
        on right: 2 3
    VarDecl <ast> (44)
        on left: 10
        on right: 4
    ArrayDecl <ast> (45)
        on left: 11
        on right: 7
    WhileStmt (46)
        on left: 12
        on right: 9
    IfStmt <ast> (47)
        on left: 14
        on right: 16 17
    $@1 (48)
        on left: 13
        on right: 14
    ElseStmt <ast> (49)
        on left: 16 17
        on right: 8
    $@2 (50)
        on left: 15
        on right: 16
    CONDITION <ast> (51)
        on left: 18 19
        on right: 12 14 19
    TestExpr <ast> (52)
        on left: 20 21
        on right: 18
    TestOp <ast> (53)
        on left: 22 23 24 25 26 27
        on right: 18
    Block <ast> (54)
        on left: 28
        on right: 12 14 16 53
    StmtList <ast> (55)
        on left: 29 30
        on right: 6 30
    Stmt <ast> (56)
        on left: 31 32
        on right: 30
    OPERATION <ast> (57)
        on left: 33 34 35 36 37 38 39 40 41 42 43 44 45 46
        on right: 33 34 35 36 37 38 39 40 41 42 43 44 54 57
    ParamDecl <ast> (58)
        on left: 47 48 49
        on right: 48 53
    ParamDeclEnd <ast> (59)
        on left: 50
        on right: 49
    Function <ast> (60)
        on left: 53
        on right: 5
    @3 (61)
        on left: 51
        on right: 53
    @4 (62)
        on left: 52
        on right: 53
    Expr <ast> (63)
        on left: 54 55 56 57 58 59 60 61 62
        on right: 32
    CallParam <ast> (64)
        on left: 63 64 65
        on right: 64 67
    CallParamEnd <ast> (65)
        on left: 66
        on right: 65
    FuncCall <ast> (66)
        on left: 67
        on right: 60 62


State 0

    0 $accept: • Program $end

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6

    TYPE       [reduce using rule 29 (StmtList)]
    ID         [reduce using rule 29 (StmtList)]
    SEMICOLON  [reduce using rule 29 (StmtList)]
    WRITE      [reduce using rule 29 (StmtList)]
    IF         [reduce using rule 29 (StmtList)]
    WHILE      [reduce using rule 29 (StmtList)]
    $default   reduce using rule 29 (StmtList)

    Program    go to state 7
    DeclList   go to state 8
    Decl       go to state 9
    VarDecl    go to state 10
    ArrayDecl  go to state 11
    WhileStmt  go to state 12
    IfStmt     go to state 13
    ElseStmt   go to state 14
    StmtList   go to state 15
    Stmt       go to state 16
    Function   go to state 17
    Expr       go to state 18
    FuncCall   go to state 19


State 1

   10 VarDecl: TYPE • ID SEMICOLON
   11 ArrayDecl: TYPE • ID LeftBracket NUMBER RightBracket SEMICOLON
   53 Function: TYPE • ID LeftPar @3 ParamDecl @4 RightPar Block

    ID  shift, and go to state 20


State 2

   54 Expr: ID • EQ OPERATION
   55     | ID • EQ CHAR
   56     | ID • EQ FLOAT
   57     | ID • LeftBracket NUMBER RightBracket EQ OPERATION
   58     | ID • LeftBracket NUMBER RightBracket EQ CHAR
   59     | ID • LeftBracket NUMBER RightBracket EQ FLOAT
   60     | ID • EQ FuncCall
   67 FuncCall: ID • LeftPar CallParam RightPar

    EQ           shift, and go to state 21
    LeftPar      shift, and go to state 22
    LeftBracket  shift, and go to state 23


State 3

   31 Stmt: SEMICOLON •

    $default  reduce using rule 31 (Stmt)


State 4

   61 Expr: WRITE • ID

    ID  shift, and go to state 24


State 5

   14 IfStmt: IF • CONDITION $@1 Block

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 26
    NUMBER   shift, and go to state 27

    CONDITION  go to state 28
    TestExpr   go to state 29


State 6

   12 WhileStmt: WHILE • CONDITION Block

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 26
    NUMBER   shift, and go to state 27

    CONDITION  go to state 30
    TestExpr   go to state 29


State 7

    0 $accept: Program • $end

    $end  shift, and go to state 31


State 8

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 9

    2 DeclList: Decl • DeclList
    3         | Decl •

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6

    $end        reduce using rule 3 (DeclList)
    $end        [reduce using rule 29 (StmtList)]
    TYPE        [reduce using rule 29 (StmtList)]
    ID          [reduce using rule 29 (StmtList)]
    SEMICOLON   [reduce using rule 29 (StmtList)]
    RightCurly  reduce using rule 3 (DeclList)
    RightCurly  [reduce using rule 29 (StmtList)]
    WRITE       [reduce using rule 29 (StmtList)]
    IF          [reduce using rule 29 (StmtList)]
    WHILE       [reduce using rule 29 (StmtList)]
    $default    reduce using rule 3 (DeclList)

    DeclList   go to state 32
    Decl       go to state 9
    VarDecl    go to state 10
    ArrayDecl  go to state 11
    WhileStmt  go to state 12
    IfStmt     go to state 13
    ElseStmt   go to state 14
    StmtList   go to state 15
    Stmt       go to state 16
    Function   go to state 17
    Expr       go to state 18
    FuncCall   go to state 19


State 10

    4 Decl: VarDecl •

    $default  reduce using rule 4 (Decl)


State 11

    7 Decl: ArrayDecl •

    $default  reduce using rule 7 (Decl)


State 12

    9 Decl: WhileStmt •

    $default  reduce using rule 9 (Decl)


State 13

   16 ElseStmt: IfStmt • ELSE $@2 Block
   17         | IfStmt •

    ELSE  shift, and go to state 33

    $default  reduce using rule 17 (ElseStmt)


State 14

    8 Decl: ElseStmt •

    $default  reduce using rule 8 (Decl)


State 15

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 16

   30 StmtList: Stmt • StmtList

    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    ID         [reduce using rule 29 (StmtList)]
    SEMICOLON  [reduce using rule 29 (StmtList)]
    WRITE      [reduce using rule 29 (StmtList)]
    $default   reduce using rule 29 (StmtList)

    StmtList  go to state 34
    Stmt      go to state 16
    Expr      go to state 18
    FuncCall  go to state 19


State 17

    5 Decl: Function •

    $default  reduce using rule 5 (Decl)


State 18

   32 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 35


State 19

   62 Expr: FuncCall •

    $default  reduce using rule 62 (Expr)


State 20

   10 VarDecl: TYPE ID • SEMICOLON
   11 ArrayDecl: TYPE ID • LeftBracket NUMBER RightBracket SEMICOLON
   53 Function: TYPE ID • LeftPar @3 ParamDecl @4 RightPar Block

    SEMICOLON    shift, and go to state 36
    LeftPar      shift, and go to state 37
    LeftBracket  shift, and go to state 38


State 21

   54 Expr: ID EQ • OPERATION
   55     | ID EQ • CHAR
   56     | ID EQ • FLOAT
   60     | ID EQ • FuncCall

    ID       shift, and go to state 39
    LeftPar  shift, and go to state 40
    CHAR     shift, and go to state 41
    NUMBER   shift, and go to state 42
    FLOAT    shift, and go to state 43

    OPERATION  go to state 44
    FuncCall   go to state 45


State 22

   67 FuncCall: ID LeftPar • CallParam RightPar

    ID  shift, and go to state 46

    $default  reduce using rule 63 (CallParam)

    CallParam     go to state 47
    CallParamEnd  go to state 48


State 23

   57 Expr: ID LeftBracket • NUMBER RightBracket EQ OPERATION
   58     | ID LeftBracket • NUMBER RightBracket EQ CHAR
   59     | ID LeftBracket • NUMBER RightBracket EQ FLOAT

    NUMBER  shift, and go to state 49


State 24

   61 Expr: WRITE ID •

    $default  reduce using rule 61 (Expr)


State 25

   20 TestExpr: ID •

    $default  reduce using rule 20 (TestExpr)


State 26

   19 CONDITION: LeftPar • CONDITION RightPar

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 26
    NUMBER   shift, and go to state 27

    CONDITION  go to state 50
    TestExpr   go to state 29


State 27

   21 TestExpr: NUMBER •

    $default  reduce using rule 21 (TestExpr)


State 28

   14 IfStmt: IF CONDITION • $@1 Block

    $default  reduce using rule 13 ($@1)

    $@1  go to state 51


State 29

   18 CONDITION: TestExpr • TestOp TestExpr

    EQ_COND     shift, and go to state 52
    GREATER     shift, and go to state 53
    LESS        shift, and go to state 54
    GREATER_EQ  shift, and go to state 55
    LESS_EQ     shift, and go to state 56
    NOT         shift, and go to state 57

    TestOp  go to state 58


State 30

   12 WhileStmt: WHILE CONDITION • Block

    LeftCurly  shift, and go to state 59

    Block  go to state 60


State 31

    0 $accept: Program $end •

    $default  accept


State 32

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 33

   16 ElseStmt: IfStmt ELSE • $@2 Block

    $default  reduce using rule 15 ($@2)

    $@2  go to state 61


State 34

   30 StmtList: Stmt StmtList •

    $default  reduce using rule 30 (StmtList)


State 35

   32 Stmt: Expr SEMICOLON •

    $default  reduce using rule 32 (Stmt)


State 36

   10 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 10 (VarDecl)


State 37

   53 Function: TYPE ID LeftPar • @3 ParamDecl @4 RightPar Block

    $default  reduce using rule 51 (@3)

    @3  go to state 62


State 38

   11 ArrayDecl: TYPE ID LeftBracket • NUMBER RightBracket SEMICOLON

    NUMBER  shift, and go to state 63


State 39

   39 OPERATION: ID • PLUS_OP OPERATION
   40          | ID • SUB_OP OPERATION
   41          | ID • MULT_OP OPERATION
   42          | ID • DIV_OP OPERATION
   43          | ID • CAR_OP OPERATION
   46          | ID •
   67 FuncCall: ID • LeftPar CallParam RightPar

    PLUS_OP  shift, and go to state 64
    SUB_OP   shift, and go to state 65
    MULT_OP  shift, and go to state 66
    DIV_OP   shift, and go to state 67
    CAR_OP   shift, and go to state 68
    LeftPar  shift, and go to state 22

    $default  reduce using rule 46 (OPERATION)


State 40

   33 OPERATION: LeftPar • OPERATION RightPar
   44          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 70


State 41

   55 Expr: ID EQ CHAR •

    $default  reduce using rule 55 (Expr)


State 42

   34 OPERATION: NUMBER • PLUS_OP OPERATION
   35          | NUMBER • SUB_OP OPERATION
   36          | NUMBER • MULT_OP OPERATION
   37          | NUMBER • DIV_OP OPERATION
   38          | NUMBER • CAR_OP OPERATION
   45          | NUMBER •

    PLUS_OP  shift, and go to state 71
    SUB_OP   shift, and go to state 72
    MULT_OP  shift, and go to state 73
    DIV_OP   shift, and go to state 74
    CAR_OP   shift, and go to state 75

    $default  reduce using rule 45 (OPERATION)


State 43

   56 Expr: ID EQ FLOAT •

    $default  reduce using rule 56 (Expr)


State 44

   54 Expr: ID EQ OPERATION •

    $default  reduce using rule 54 (Expr)


State 45

   60 Expr: ID EQ FuncCall •

    $default  reduce using rule 60 (Expr)


State 46

   64 CallParam: ID • COMMA CallParam
   66 CallParamEnd: ID •

    COMMA  shift, and go to state 76

    $default  reduce using rule 66 (CallParamEnd)


State 47

   67 FuncCall: ID LeftPar CallParam • RightPar

    RightPar  shift, and go to state 77


State 48

   65 CallParam: CallParamEnd •

    $default  reduce using rule 65 (CallParam)


State 49

   57 Expr: ID LeftBracket NUMBER • RightBracket EQ OPERATION
   58     | ID LeftBracket NUMBER • RightBracket EQ CHAR
   59     | ID LeftBracket NUMBER • RightBracket EQ FLOAT

    RightBracket  shift, and go to state 78


State 50

   19 CONDITION: LeftPar CONDITION • RightPar

    RightPar  shift, and go to state 79


State 51

   14 IfStmt: IF CONDITION $@1 • Block

    LeftCurly  shift, and go to state 59

    Block  go to state 80


State 52

   22 TestOp: EQ_COND •

    $default  reduce using rule 22 (TestOp)


State 53

   23 TestOp: GREATER •

    $default  reduce using rule 23 (TestOp)


State 54

   24 TestOp: LESS •

    $default  reduce using rule 24 (TestOp)


State 55

   25 TestOp: GREATER_EQ •

    $default  reduce using rule 25 (TestOp)


State 56

   26 TestOp: LESS_EQ •

    $default  reduce using rule 26 (TestOp)


State 57

   27 TestOp: NOT •

    $default  reduce using rule 27 (TestOp)


State 58

   18 CONDITION: TestExpr TestOp • TestExpr

    ID      shift, and go to state 25
    NUMBER  shift, and go to state 27

    TestExpr  go to state 81


State 59

   28 Block: LeftCurly • DeclList RightCurly

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6

    TYPE       [reduce using rule 29 (StmtList)]
    ID         [reduce using rule 29 (StmtList)]
    SEMICOLON  [reduce using rule 29 (StmtList)]
    WRITE      [reduce using rule 29 (StmtList)]
    IF         [reduce using rule 29 (StmtList)]
    WHILE      [reduce using rule 29 (StmtList)]
    $default   reduce using rule 29 (StmtList)

    DeclList   go to state 82
    Decl       go to state 9
    VarDecl    go to state 10
    ArrayDecl  go to state 11
    WhileStmt  go to state 12
    IfStmt     go to state 13
    ElseStmt   go to state 14
    StmtList   go to state 15
    Stmt       go to state 16
    Function   go to state 17
    Expr       go to state 18
    FuncCall   go to state 19


State 60

   12 WhileStmt: WHILE CONDITION Block •

    $default  reduce using rule 12 (WhileStmt)


State 61

   16 ElseStmt: IfStmt ELSE $@2 • Block

    LeftCurly  shift, and go to state 59

    Block  go to state 83


State 62

   53 Function: TYPE ID LeftPar @3 • ParamDecl @4 RightPar Block

    TYPE  shift, and go to state 84

    $default  reduce using rule 47 (ParamDecl)

    ParamDecl     go to state 85
    ParamDeclEnd  go to state 86


State 63

   11 ArrayDecl: TYPE ID LeftBracket NUMBER • RightBracket SEMICOLON

    RightBracket  shift, and go to state 87


State 64

   39 OPERATION: ID PLUS_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 88


State 65

   40 OPERATION: ID SUB_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 89


State 66

   41 OPERATION: ID MULT_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 90


State 67

   42 OPERATION: ID DIV_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 91


State 68

   43 OPERATION: ID CAR_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 92


State 69

   39 OPERATION: ID • PLUS_OP OPERATION
   40          | ID • SUB_OP OPERATION
   41          | ID • MULT_OP OPERATION
   42          | ID • DIV_OP OPERATION
   43          | ID • CAR_OP OPERATION
   46          | ID •

    PLUS_OP  shift, and go to state 64
    SUB_OP   shift, and go to state 65
    MULT_OP  shift, and go to state 66
    DIV_OP   shift, and go to state 67
    CAR_OP   shift, and go to state 68

    $default  reduce using rule 46 (OPERATION)


State 70

   33 OPERATION: LeftPar OPERATION • RightPar
   44          | LeftPar OPERATION • RightPar PLUS_OP OPERATION

    RightPar  shift, and go to state 93


State 71

   34 OPERATION: NUMBER PLUS_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 94


State 72

   35 OPERATION: NUMBER SUB_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 95


State 73

   36 OPERATION: NUMBER MULT_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 96


State 74

   37 OPERATION: NUMBER DIV_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 97


State 75

   38 OPERATION: NUMBER CAR_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 98


State 76

   64 CallParam: ID COMMA • CallParam

    ID  shift, and go to state 46

    $default  reduce using rule 63 (CallParam)

    CallParam     go to state 99
    CallParamEnd  go to state 48


State 77

   67 FuncCall: ID LeftPar CallParam RightPar •

    $default  reduce using rule 67 (FuncCall)


State 78

   57 Expr: ID LeftBracket NUMBER RightBracket • EQ OPERATION
   58     | ID LeftBracket NUMBER RightBracket • EQ CHAR
   59     | ID LeftBracket NUMBER RightBracket • EQ FLOAT

    EQ  shift, and go to state 100


State 79

   19 CONDITION: LeftPar CONDITION RightPar •

    $default  reduce using rule 19 (CONDITION)


State 80

   14 IfStmt: IF CONDITION $@1 Block •

    $default  reduce using rule 14 (IfStmt)


State 81

   18 CONDITION: TestExpr TestOp TestExpr •

    $default  reduce using rule 18 (CONDITION)


State 82

   28 Block: LeftCurly DeclList • RightCurly

    RightCurly  shift, and go to state 101


State 83

   16 ElseStmt: IfStmt ELSE $@2 Block •

    $default  reduce using rule 16 (ElseStmt)


State 84

   48 ParamDecl: TYPE • ID COMMA ParamDecl
   50 ParamDeclEnd: TYPE • ID

    ID  shift, and go to state 102


State 85

   53 Function: TYPE ID LeftPar @3 ParamDecl • @4 RightPar Block

    $default  reduce using rule 52 (@4)

    @4  go to state 103


State 86

   49 ParamDecl: ParamDeclEnd •

    $default  reduce using rule 49 (ParamDecl)


State 87

   11 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket • SEMICOLON

    SEMICOLON  shift, and go to state 104


State 88

   39 OPERATION: ID PLUS_OP OPERATION •

    $default  reduce using rule 39 (OPERATION)


State 89

   40 OPERATION: ID SUB_OP OPERATION •

    $default  reduce using rule 40 (OPERATION)


State 90

   41 OPERATION: ID MULT_OP OPERATION •

    $default  reduce using rule 41 (OPERATION)


State 91

   42 OPERATION: ID DIV_OP OPERATION •

    $default  reduce using rule 42 (OPERATION)


State 92

   43 OPERATION: ID CAR_OP OPERATION •

    $default  reduce using rule 43 (OPERATION)


State 93

   33 OPERATION: LeftPar OPERATION RightPar •
   44          | LeftPar OPERATION RightPar • PLUS_OP OPERATION

    PLUS_OP  shift, and go to state 105

    $default  reduce using rule 33 (OPERATION)


State 94

   34 OPERATION: NUMBER PLUS_OP OPERATION •

    $default  reduce using rule 34 (OPERATION)


State 95

   35 OPERATION: NUMBER SUB_OP OPERATION •

    $default  reduce using rule 35 (OPERATION)


State 96

   36 OPERATION: NUMBER MULT_OP OPERATION •

    $default  reduce using rule 36 (OPERATION)


State 97

   37 OPERATION: NUMBER DIV_OP OPERATION •

    $default  reduce using rule 37 (OPERATION)


State 98

   38 OPERATION: NUMBER CAR_OP OPERATION •

    $default  reduce using rule 38 (OPERATION)


State 99

   64 CallParam: ID COMMA CallParam •

    $default  reduce using rule 64 (CallParam)


State 100

   57 Expr: ID LeftBracket NUMBER RightBracket EQ • OPERATION
   58     | ID LeftBracket NUMBER RightBracket EQ • CHAR
   59     | ID LeftBracket NUMBER RightBracket EQ • FLOAT

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    CHAR     shift, and go to state 106
    NUMBER   shift, and go to state 42
    FLOAT    shift, and go to state 107

    OPERATION  go to state 108


State 101

   28 Block: LeftCurly DeclList RightCurly •

    $default  reduce using rule 28 (Block)


State 102

   48 ParamDecl: TYPE ID • COMMA ParamDecl
   50 ParamDeclEnd: TYPE ID •

    COMMA  shift, and go to state 109

    $default  reduce using rule 50 (ParamDeclEnd)


State 103

   53 Function: TYPE ID LeftPar @3 ParamDecl @4 • RightPar Block

    RightPar  shift, and go to state 110


State 104

   11 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON •

    $default  reduce using rule 11 (ArrayDecl)


State 105

   44 OPERATION: LeftPar OPERATION RightPar PLUS_OP • OPERATION

    ID       shift, and go to state 69
    LeftPar  shift, and go to state 40
    NUMBER   shift, and go to state 42

    OPERATION  go to state 111


State 106

   58 Expr: ID LeftBracket NUMBER RightBracket EQ CHAR •

    $default  reduce using rule 58 (Expr)


State 107

   59 Expr: ID LeftBracket NUMBER RightBracket EQ FLOAT •

    $default  reduce using rule 59 (Expr)


State 108

   57 Expr: ID LeftBracket NUMBER RightBracket EQ OPERATION •

    $default  reduce using rule 57 (Expr)


State 109

   48 ParamDecl: TYPE ID COMMA • ParamDecl

    TYPE  shift, and go to state 84

    $default  reduce using rule 47 (ParamDecl)

    ParamDecl     go to state 112
    ParamDeclEnd  go to state 86


State 110

   53 Function: TYPE ID LeftPar @3 ParamDecl @4 RightPar • Block

    LeftCurly  shift, and go to state 59

    Block  go to state 113


State 111

   44 OPERATION: LeftPar OPERATION RightPar PLUS_OP OPERATION •

    $default  reduce using rule 44 (OPERATION)


State 112

   48 ParamDecl: TYPE ID COMMA ParamDecl •

    $default  reduce using rule 48 (ParamDecl)


State 113

   53 Function: TYPE ID LeftPar @3 ParamDecl @4 RightPar Block •

    $default  reduce using rule 53 (Function)
