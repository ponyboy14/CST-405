Nonterminals useless in grammar

    FuncBlock


Terminals unused in grammar

    DOT
    QUOTE
    WRITELN
    READ
    RETURN
    BOOL
    TRUE
    FALSE


Rules useless in grammar

   72 FuncBlock: LeftCurly DeclList RETURN ID SEMICOLON RightCurly


Rules useless in parser due to conflicts

   30 StmtList: ε


State 0 conflicts: 7 shift/reduce, 8 reduce/reduce
State 10 conflicts: 7 shift/reduce, 11 reduce/reduce
State 17 conflicts: 6 shift/reduce, 9 reduce/reduce
State 26 conflicts: 9 reduce/reduce
State 28 conflicts: 9 reduce/reduce
State 32 conflicts: 7 shift/reduce, 8 reduce/reduce
State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: VarDecl
    5     | Function
    6     | StmtList
    7     | ArrayDecl

    8 VarDecl: TYPE ID SEMICOLON

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON

   10 @1: ε

   11 IfStmt: IF CONDITIONIF Block @1 ElseStmt

   12 ElseStmt: ELSE Block
   13         | ε

   14 WhileStmt: WHILE CONDITIONWHILE Block

   15 CONDITIONWHILE: TestExpr TestOp TestExpr
   16               | LeftPar CONDITIONWHILE RightPar

   17 CONDITIONIF: TestExpr TestOp TestExpr
   18            | LeftPar CONDITIONIF RightPar

   19 TestExpr: ID
   20         | NUMBER
   21         | ID LeftBracket TestExpr RightBracket
   22         | OPERATION

   23 TestOp: EQ_COND
   24       | GREATER
   25       | LESS
   26       | GREATER_EQ
   27       | LESS_EQ
   28       | NOT

   29 Block: LeftCurly DeclList RightCurly

   30 StmtList: ε
   31         | Stmt StmtList

   32 Stmt: SEMICOLON
   33     | Expr SEMICOLON
   34     | IfStmt
   35     | ElseStmt
   36     | WhileStmt

   37 OPERATION: LeftPar OPERATION RightPar
   38          | NUMBER PLUS_OP OPERATION
   39          | NUMBER SUB_OP OPERATION
   40          | NUMBER MULT_OP OPERATION
   41          | NUMBER DIV_OP OPERATION
   42          | NUMBER CAR_OP OPERATION
   43          | ID PLUS_OP OPERATION
   44          | ID SUB_OP OPERATION
   45          | ID MULT_OP OPERATION
   46          | ID DIV_OP OPERATION
   47          | ID CAR_OP OPERATION
   48          | LeftPar OPERATION RightPar PLUS_OP OPERATION
   49          | NUMBER
   50          | ID

   51 ParamDecl: ε
   52          | TYPE ID COMMA ParamDecl
   53          | ParamDeclEnd

   54 ParamDeclEnd: TYPE ID

   55 @2: ε

   56 @3: ε

   57 Function: TYPE ID LeftPar @2 ParamDecl @3 RightPar Block

   58 Expr: ID EQ OPERATION
   59     | ID EQ CHAR
   60     | ID EQ FLOAT
   61     | ID LeftBracket NUMBER RightBracket EQ OPERATION
   62     | ID LeftBracket NUMBER RightBracket EQ CHAR
   63     | ID LeftBracket NUMBER RightBracket EQ FLOAT
   64     | ID EQ FuncCall
   65     | WRITE ID
   66     | FuncCall

   67 CallParam: ε
   68          | ID COMMA CallParam
   69          | CallParamEnd

   70 CallParamEnd: ID

   71 FuncCall: ID LeftPar CallParam RightPar


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 8 9 52 54 57
    ID <string> (259) 8 9 19 21 43 44 45 46 47 50 52 54 57 58 59 60 61 62 63 64 65 68 70 71
    SEMICOLON <character> (260) 8 9 32 33
    EQ <string> (261) 58 59 60 61 62 63 64
    PLUS_OP <string> (262) 38 43 48
    SUB_OP <string> (263) 39 44
    MULT_OP <string> (264) 40 45
    DIV_OP <string> (265) 41 46
    CAR_OP <string> (266) 42 47
    LeftPar <string> (267) 16 18 37 48 57 71
    RightPar <character> (268) 16 18 37 48 57 71
    LeftCurly <string> (269) 29
    RightCurly <string> (270) 29
    LeftBracket <string> (271) 9 21 61 62 63
    RightBracket <string> (272) 9 21 61 62 63
    COMMA <string> (273) 52 68
    EQ_COND <string> (274) 23
    GREATER <string> (275) 24
    LESS <string> (276) 25
    GREATER_EQ <string> (277) 26
    LESS_EQ <string> (278) 27
    NOT <string> (279) 28
    DOT <string> (280)
    CHAR <string> (281) 59 62
    QUOTE <string> (282)
    NUMBER <number> (283) 9 20 38 39 40 41 42 49 61 62 63
    FLOAT <string> (284) 60 63
    WRITE <string> (285) 65
    WRITELN <string> (286)
    READ <string> (287)
    RETURN <string> (288)
    IF <string> (289) 11
    ELSE <string> (290) 12
    WHILE <string> (291) 14
    BOOL <string> (292)
    TRUE <string> (293)
    FALSE <string> (294)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    Program <ast> (41)
        on left: 1
        on right: 0
    DeclList <ast> (42)
        on left: 2 3
        on right: 1 2 29
    Decl <ast> (43)
        on left: 4 5 6 7
        on right: 2 3
    VarDecl <ast> (44)
        on left: 8
        on right: 4
    ArrayDecl <ast> (45)
        on left: 9
        on right: 7
    IfStmt <ast> (46)
        on left: 11
        on right: 34
    @1 (47)
        on left: 10
        on right: 11
    ElseStmt <ast> (48)
        on left: 12 13
        on right: 11 35
    WhileStmt <ast> (49)
        on left: 14
        on right: 36
    CONDITIONWHILE <ast> (50)
        on left: 15 16
        on right: 14 16
    CONDITIONIF <ast> (51)
        on left: 17 18
        on right: 11 18
    TestExpr <ast> (52)
        on left: 19 20 21 22
        on right: 15 17 21
    TestOp <ast> (53)
        on left: 23 24 25 26 27 28
        on right: 15 17
    Block <ast> (54)
        on left: 29
        on right: 11 12 14 57
    StmtList <ast> (55)
        on left: 30 31
        on right: 6 31
    Stmt <ast> (56)
        on left: 32 33 34 35 36
        on right: 31
    OPERATION <ast> (57)
        on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50
        on right: 22 37 38 39 40 41 42 43 44 45 46 47 48 58 61
    ParamDecl <ast> (58)
        on left: 51 52 53
        on right: 52 57
    ParamDeclEnd <ast> (59)
        on left: 54
        on right: 53
    Function <ast> (60)
        on left: 57
        on right: 5
    @2 (61)
        on left: 55
        on right: 57
    @3 (62)
        on left: 56
        on right: 57
    Expr <ast> (63)
        on left: 58 59 60 61 62 63 64 65 66
        on right: 33
    CallParam <ast> (64)
        on left: 67 68 69
        on right: 68 71
    CallParamEnd <ast> (65)
        on left: 70
        on right: 69
    FuncCall <ast> (66)
        on left: 71
        on right: 64 66


State 0

    0 $accept: • Program $end

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    ELSE       shift, and go to state 6
    WHILE      shift, and go to state 7

    $end       reduce using rule 13 (ElseStmt)
    $end       [reduce using rule 30 (StmtList)]
    TYPE       [reduce using rule 13 (ElseStmt)]
    TYPE       [reduce using rule 30 (StmtList)]
    ID         [reduce using rule 13 (ElseStmt)]
    ID         [reduce using rule 30 (StmtList)]
    SEMICOLON  [reduce using rule 13 (ElseStmt)]
    SEMICOLON  [reduce using rule 30 (StmtList)]
    WRITE      [reduce using rule 13 (ElseStmt)]
    WRITE      [reduce using rule 30 (StmtList)]
    IF         [reduce using rule 13 (ElseStmt)]
    IF         [reduce using rule 30 (StmtList)]
    ELSE       [reduce using rule 13 (ElseStmt)]
    ELSE       [reduce using rule 30 (StmtList)]
    WHILE      [reduce using rule 13 (ElseStmt)]
    WHILE      [reduce using rule 30 (StmtList)]
    $default   reduce using rule 13 (ElseStmt)

    Program    go to state 8
    DeclList   go to state 9
    Decl       go to state 10
    VarDecl    go to state 11
    ArrayDecl  go to state 12
    IfStmt     go to state 13
    ElseStmt   go to state 14
    WhileStmt  go to state 15
    StmtList   go to state 16
    Stmt       go to state 17
    Function   go to state 18
    Expr       go to state 19
    FuncCall   go to state 20


State 1

    8 VarDecl: TYPE • ID SEMICOLON
    9 ArrayDecl: TYPE • ID LeftBracket NUMBER RightBracket SEMICOLON
   57 Function: TYPE • ID LeftPar @2 ParamDecl @3 RightPar Block

    ID  shift, and go to state 21


State 2

   58 Expr: ID • EQ OPERATION
   59     | ID • EQ CHAR
   60     | ID • EQ FLOAT
   61     | ID • LeftBracket NUMBER RightBracket EQ OPERATION
   62     | ID • LeftBracket NUMBER RightBracket EQ CHAR
   63     | ID • LeftBracket NUMBER RightBracket EQ FLOAT
   64     | ID • EQ FuncCall
   71 FuncCall: ID • LeftPar CallParam RightPar

    EQ           shift, and go to state 22
    LeftPar      shift, and go to state 23
    LeftBracket  shift, and go to state 24


State 3

   32 Stmt: SEMICOLON •

    $default  reduce using rule 32 (Stmt)


State 4

   65 Expr: WRITE • ID

    ID  shift, and go to state 25


State 5

   11 IfStmt: IF • CONDITIONIF Block @1 ElseStmt

    ID       shift, and go to state 26
    LeftPar  shift, and go to state 27
    NUMBER   shift, and go to state 28

    CONDITIONIF  go to state 29
    TestExpr     go to state 30
    OPERATION    go to state 31


State 6

   12 ElseStmt: ELSE • Block

    LeftCurly  shift, and go to state 32

    Block  go to state 33


State 7

   14 WhileStmt: WHILE • CONDITIONWHILE Block

    ID       shift, and go to state 26
    LeftPar  shift, and go to state 34
    NUMBER   shift, and go to state 28

    CONDITIONWHILE  go to state 35
    TestExpr        go to state 36
    OPERATION       go to state 31


State 8

    0 $accept: Program • $end

    $end  shift, and go to state 37


State 9

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 10

    2 DeclList: Decl • DeclList
    3         | Decl •

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    ELSE       shift, and go to state 6
    WHILE      shift, and go to state 7

    $end        reduce using rule 3 (DeclList)
    $end        [reduce using rule 13 (ElseStmt)]
    $end        [reduce using rule 30 (StmtList)]
    TYPE        [reduce using rule 13 (ElseStmt)]
    TYPE        [reduce using rule 30 (StmtList)]
    ID          [reduce using rule 13 (ElseStmt)]
    ID          [reduce using rule 30 (StmtList)]
    SEMICOLON   [reduce using rule 13 (ElseStmt)]
    SEMICOLON   [reduce using rule 30 (StmtList)]
    RightCurly  reduce using rule 3 (DeclList)
    RightCurly  [reduce using rule 13 (ElseStmt)]
    RightCurly  [reduce using rule 30 (StmtList)]
    WRITE       [reduce using rule 13 (ElseStmt)]
    WRITE       [reduce using rule 30 (StmtList)]
    IF          [reduce using rule 13 (ElseStmt)]
    IF          [reduce using rule 30 (StmtList)]
    ELSE        [reduce using rule 13 (ElseStmt)]
    ELSE        [reduce using rule 30 (StmtList)]
    WHILE       [reduce using rule 13 (ElseStmt)]
    WHILE       [reduce using rule 30 (StmtList)]
    $default    reduce using rule 3 (DeclList)

    DeclList   go to state 38
    Decl       go to state 10
    VarDecl    go to state 11
    ArrayDecl  go to state 12
    IfStmt     go to state 13
    ElseStmt   go to state 14
    WhileStmt  go to state 15
    StmtList   go to state 16
    Stmt       go to state 17
    Function   go to state 18
    Expr       go to state 19
    FuncCall   go to state 20


State 11

    4 Decl: VarDecl •

    $default  reduce using rule 4 (Decl)


State 12

    7 Decl: ArrayDecl •

    $default  reduce using rule 7 (Decl)


State 13

   34 Stmt: IfStmt •

    $default  reduce using rule 34 (Stmt)


State 14

   35 Stmt: ElseStmt •

    $default  reduce using rule 35 (Stmt)


State 15

   36 Stmt: WhileStmt •

    $default  reduce using rule 36 (Stmt)


State 16

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 17

   31 StmtList: Stmt • StmtList

    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    ELSE       shift, and go to state 6
    WHILE      shift, and go to state 7

    $end        reduce using rule 13 (ElseStmt)
    $end        [reduce using rule 30 (StmtList)]
    TYPE        reduce using rule 13 (ElseStmt)
    TYPE        [reduce using rule 30 (StmtList)]
    ID          [reduce using rule 13 (ElseStmt)]
    ID          [reduce using rule 30 (StmtList)]
    SEMICOLON   [reduce using rule 13 (ElseStmt)]
    SEMICOLON   [reduce using rule 30 (StmtList)]
    RightCurly  reduce using rule 13 (ElseStmt)
    RightCurly  [reduce using rule 30 (StmtList)]
    WRITE       [reduce using rule 13 (ElseStmt)]
    WRITE       [reduce using rule 30 (StmtList)]
    IF          [reduce using rule 13 (ElseStmt)]
    IF          [reduce using rule 30 (StmtList)]
    ELSE        [reduce using rule 13 (ElseStmt)]
    ELSE        [reduce using rule 30 (StmtList)]
    WHILE       [reduce using rule 13 (ElseStmt)]
    WHILE       [reduce using rule 30 (StmtList)]
    $default    reduce using rule 13 (ElseStmt)

    IfStmt     go to state 13
    ElseStmt   go to state 14
    WhileStmt  go to state 15
    StmtList   go to state 39
    Stmt       go to state 17
    Expr       go to state 19
    FuncCall   go to state 20


State 18

    5 Decl: Function •

    $default  reduce using rule 5 (Decl)


State 19

   33 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 40


State 20

   66 Expr: FuncCall •

    $default  reduce using rule 66 (Expr)


State 21

    8 VarDecl: TYPE ID • SEMICOLON
    9 ArrayDecl: TYPE ID • LeftBracket NUMBER RightBracket SEMICOLON
   57 Function: TYPE ID • LeftPar @2 ParamDecl @3 RightPar Block

    SEMICOLON    shift, and go to state 41
    LeftPar      shift, and go to state 42
    LeftBracket  shift, and go to state 43


State 22

   58 Expr: ID EQ • OPERATION
   59     | ID EQ • CHAR
   60     | ID EQ • FLOAT
   64     | ID EQ • FuncCall

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 45
    CHAR     shift, and go to state 46
    NUMBER   shift, and go to state 47
    FLOAT    shift, and go to state 48

    OPERATION  go to state 49
    FuncCall   go to state 50


State 23

   71 FuncCall: ID LeftPar • CallParam RightPar

    ID  shift, and go to state 51

    $default  reduce using rule 67 (CallParam)

    CallParam     go to state 52
    CallParamEnd  go to state 53


State 24

   61 Expr: ID LeftBracket • NUMBER RightBracket EQ OPERATION
   62     | ID LeftBracket • NUMBER RightBracket EQ CHAR
   63     | ID LeftBracket • NUMBER RightBracket EQ FLOAT

    NUMBER  shift, and go to state 54


State 25

   65 Expr: WRITE ID •

    $default  reduce using rule 65 (Expr)


State 26

   19 TestExpr: ID •
   21         | ID • LeftBracket TestExpr RightBracket
   43 OPERATION: ID • PLUS_OP OPERATION
   44          | ID • SUB_OP OPERATION
   45          | ID • MULT_OP OPERATION
   46          | ID • DIV_OP OPERATION
   47          | ID • CAR_OP OPERATION
   50          | ID •

    PLUS_OP      shift, and go to state 55
    SUB_OP       shift, and go to state 56
    MULT_OP      shift, and go to state 57
    DIV_OP       shift, and go to state 58
    CAR_OP       shift, and go to state 59
    LeftBracket  shift, and go to state 60

    RightPar      reduce using rule 19 (TestExpr)
    RightPar      [reduce using rule 50 (OPERATION)]
    LeftCurly     reduce using rule 19 (TestExpr)
    LeftCurly     [reduce using rule 50 (OPERATION)]
    RightBracket  reduce using rule 19 (TestExpr)
    RightBracket  [reduce using rule 50 (OPERATION)]
    EQ_COND       reduce using rule 19 (TestExpr)
    EQ_COND       [reduce using rule 50 (OPERATION)]
    GREATER       reduce using rule 19 (TestExpr)
    GREATER       [reduce using rule 50 (OPERATION)]
    LESS          reduce using rule 19 (TestExpr)
    LESS          [reduce using rule 50 (OPERATION)]
    GREATER_EQ    reduce using rule 19 (TestExpr)
    GREATER_EQ    [reduce using rule 50 (OPERATION)]
    LESS_EQ       reduce using rule 19 (TestExpr)
    LESS_EQ       [reduce using rule 50 (OPERATION)]
    NOT           reduce using rule 19 (TestExpr)
    NOT           [reduce using rule 50 (OPERATION)]
    $default      reduce using rule 19 (TestExpr)


State 27

   18 CONDITIONIF: LeftPar • CONDITIONIF RightPar
   37 OPERATION: LeftPar • OPERATION RightPar
   48          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 26
    LeftPar  shift, and go to state 27
    NUMBER   shift, and go to state 28

    CONDITIONIF  go to state 61
    TestExpr     go to state 30
    OPERATION    go to state 62


State 28

   20 TestExpr: NUMBER •
   38 OPERATION: NUMBER • PLUS_OP OPERATION
   39          | NUMBER • SUB_OP OPERATION
   40          | NUMBER • MULT_OP OPERATION
   41          | NUMBER • DIV_OP OPERATION
   42          | NUMBER • CAR_OP OPERATION
   49          | NUMBER •

    PLUS_OP  shift, and go to state 63
    SUB_OP   shift, and go to state 64
    MULT_OP  shift, and go to state 65
    DIV_OP   shift, and go to state 66
    CAR_OP   shift, and go to state 67

    RightPar      reduce using rule 20 (TestExpr)
    RightPar      [reduce using rule 49 (OPERATION)]
    LeftCurly     reduce using rule 20 (TestExpr)
    LeftCurly     [reduce using rule 49 (OPERATION)]
    RightBracket  reduce using rule 20 (TestExpr)
    RightBracket  [reduce using rule 49 (OPERATION)]
    EQ_COND       reduce using rule 20 (TestExpr)
    EQ_COND       [reduce using rule 49 (OPERATION)]
    GREATER       reduce using rule 20 (TestExpr)
    GREATER       [reduce using rule 49 (OPERATION)]
    LESS          reduce using rule 20 (TestExpr)
    LESS          [reduce using rule 49 (OPERATION)]
    GREATER_EQ    reduce using rule 20 (TestExpr)
    GREATER_EQ    [reduce using rule 49 (OPERATION)]
    LESS_EQ       reduce using rule 20 (TestExpr)
    LESS_EQ       [reduce using rule 49 (OPERATION)]
    NOT           reduce using rule 20 (TestExpr)
    NOT           [reduce using rule 49 (OPERATION)]
    $default      reduce using rule 20 (TestExpr)


State 29

   11 IfStmt: IF CONDITIONIF • Block @1 ElseStmt

    LeftCurly  shift, and go to state 32

    Block  go to state 68


State 30

   17 CONDITIONIF: TestExpr • TestOp TestExpr

    EQ_COND     shift, and go to state 69
    GREATER     shift, and go to state 70
    LESS        shift, and go to state 71
    GREATER_EQ  shift, and go to state 72
    LESS_EQ     shift, and go to state 73
    NOT         shift, and go to state 74

    TestOp  go to state 75


State 31

   22 TestExpr: OPERATION •

    $default  reduce using rule 22 (TestExpr)


State 32

   29 Block: LeftCurly • DeclList RightCurly

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    ELSE       shift, and go to state 6
    WHILE      shift, and go to state 7

    TYPE        [reduce using rule 13 (ElseStmt)]
    TYPE        [reduce using rule 30 (StmtList)]
    ID          [reduce using rule 13 (ElseStmt)]
    ID          [reduce using rule 30 (StmtList)]
    SEMICOLON   [reduce using rule 13 (ElseStmt)]
    SEMICOLON   [reduce using rule 30 (StmtList)]
    RightCurly  reduce using rule 13 (ElseStmt)
    RightCurly  [reduce using rule 30 (StmtList)]
    WRITE       [reduce using rule 13 (ElseStmt)]
    WRITE       [reduce using rule 30 (StmtList)]
    IF          [reduce using rule 13 (ElseStmt)]
    IF          [reduce using rule 30 (StmtList)]
    ELSE        [reduce using rule 13 (ElseStmt)]
    ELSE        [reduce using rule 30 (StmtList)]
    WHILE       [reduce using rule 13 (ElseStmt)]
    WHILE       [reduce using rule 30 (StmtList)]
    $default    reduce using rule 13 (ElseStmt)

    DeclList   go to state 76
    Decl       go to state 10
    VarDecl    go to state 11
    ArrayDecl  go to state 12
    IfStmt     go to state 13
    ElseStmt   go to state 14
    WhileStmt  go to state 15
    StmtList   go to state 16
    Stmt       go to state 17
    Function   go to state 18
    Expr       go to state 19
    FuncCall   go to state 20


State 33

   12 ElseStmt: ELSE Block •

    $default  reduce using rule 12 (ElseStmt)


State 34

   16 CONDITIONWHILE: LeftPar • CONDITIONWHILE RightPar
   37 OPERATION: LeftPar • OPERATION RightPar
   48          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 26
    LeftPar  shift, and go to state 34
    NUMBER   shift, and go to state 28

    CONDITIONWHILE  go to state 77
    TestExpr        go to state 36
    OPERATION       go to state 62


State 35

   14 WhileStmt: WHILE CONDITIONWHILE • Block

    LeftCurly  shift, and go to state 32

    Block  go to state 78


State 36

   15 CONDITIONWHILE: TestExpr • TestOp TestExpr

    EQ_COND     shift, and go to state 69
    GREATER     shift, and go to state 70
    LESS        shift, and go to state 71
    GREATER_EQ  shift, and go to state 72
    LESS_EQ     shift, and go to state 73
    NOT         shift, and go to state 74

    TestOp  go to state 79


State 37

    0 $accept: Program $end •

    $default  accept


State 38

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 39

   31 StmtList: Stmt StmtList •

    $default  reduce using rule 31 (StmtList)


State 40

   33 Stmt: Expr SEMICOLON •

    $default  reduce using rule 33 (Stmt)


State 41

    8 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 8 (VarDecl)


State 42

   57 Function: TYPE ID LeftPar • @2 ParamDecl @3 RightPar Block

    $default  reduce using rule 55 (@2)

    @2  go to state 80


State 43

    9 ArrayDecl: TYPE ID LeftBracket • NUMBER RightBracket SEMICOLON

    NUMBER  shift, and go to state 81


State 44

   43 OPERATION: ID • PLUS_OP OPERATION
   44          | ID • SUB_OP OPERATION
   45          | ID • MULT_OP OPERATION
   46          | ID • DIV_OP OPERATION
   47          | ID • CAR_OP OPERATION
   50          | ID •
   71 FuncCall: ID • LeftPar CallParam RightPar

    PLUS_OP  shift, and go to state 55
    SUB_OP   shift, and go to state 56
    MULT_OP  shift, and go to state 57
    DIV_OP   shift, and go to state 58
    CAR_OP   shift, and go to state 59
    LeftPar  shift, and go to state 23

    $default  reduce using rule 50 (OPERATION)


State 45

   37 OPERATION: LeftPar • OPERATION RightPar
   48          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 83


State 46

   59 Expr: ID EQ CHAR •

    $default  reduce using rule 59 (Expr)


State 47

   38 OPERATION: NUMBER • PLUS_OP OPERATION
   39          | NUMBER • SUB_OP OPERATION
   40          | NUMBER • MULT_OP OPERATION
   41          | NUMBER • DIV_OP OPERATION
   42          | NUMBER • CAR_OP OPERATION
   49          | NUMBER •

    PLUS_OP  shift, and go to state 63
    SUB_OP   shift, and go to state 64
    MULT_OP  shift, and go to state 65
    DIV_OP   shift, and go to state 66
    CAR_OP   shift, and go to state 67

    $default  reduce using rule 49 (OPERATION)


State 48

   60 Expr: ID EQ FLOAT •

    $default  reduce using rule 60 (Expr)


State 49

   58 Expr: ID EQ OPERATION •

    $default  reduce using rule 58 (Expr)


State 50

   64 Expr: ID EQ FuncCall •

    $default  reduce using rule 64 (Expr)


State 51

   68 CallParam: ID • COMMA CallParam
   70 CallParamEnd: ID •

    COMMA  shift, and go to state 84

    $default  reduce using rule 70 (CallParamEnd)


State 52

   71 FuncCall: ID LeftPar CallParam • RightPar

    RightPar  shift, and go to state 85


State 53

   69 CallParam: CallParamEnd •

    $default  reduce using rule 69 (CallParam)


State 54

   61 Expr: ID LeftBracket NUMBER • RightBracket EQ OPERATION
   62     | ID LeftBracket NUMBER • RightBracket EQ CHAR
   63     | ID LeftBracket NUMBER • RightBracket EQ FLOAT

    RightBracket  shift, and go to state 86


State 55

   43 OPERATION: ID PLUS_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 87


State 56

   44 OPERATION: ID SUB_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 88


State 57

   45 OPERATION: ID MULT_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 89


State 58

   46 OPERATION: ID DIV_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 90


State 59

   47 OPERATION: ID CAR_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 91


State 60

   21 TestExpr: ID LeftBracket • TestExpr RightBracket

    ID       shift, and go to state 26
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 28

    TestExpr   go to state 92
    OPERATION  go to state 31


State 61

   18 CONDITIONIF: LeftPar CONDITIONIF • RightPar

    RightPar  shift, and go to state 93


State 62

   22 TestExpr: OPERATION •
   37 OPERATION: LeftPar OPERATION • RightPar
   48          | LeftPar OPERATION • RightPar PLUS_OP OPERATION

    RightPar  shift, and go to state 94

    $default  reduce using rule 22 (TestExpr)


State 63

   38 OPERATION: NUMBER PLUS_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 95


State 64

   39 OPERATION: NUMBER SUB_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 96


State 65

   40 OPERATION: NUMBER MULT_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 97


State 66

   41 OPERATION: NUMBER DIV_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 98


State 67

   42 OPERATION: NUMBER CAR_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 99


State 68

   11 IfStmt: IF CONDITIONIF Block • @1 ElseStmt

    $default  reduce using rule 10 (@1)

    @1  go to state 100


State 69

   23 TestOp: EQ_COND •

    $default  reduce using rule 23 (TestOp)


State 70

   24 TestOp: GREATER •

    $default  reduce using rule 24 (TestOp)


State 71

   25 TestOp: LESS •

    $default  reduce using rule 25 (TestOp)


State 72

   26 TestOp: GREATER_EQ •

    $default  reduce using rule 26 (TestOp)


State 73

   27 TestOp: LESS_EQ •

    $default  reduce using rule 27 (TestOp)


State 74

   28 TestOp: NOT •

    $default  reduce using rule 28 (TestOp)


State 75

   17 CONDITIONIF: TestExpr TestOp • TestExpr

    ID       shift, and go to state 26
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 28

    TestExpr   go to state 101
    OPERATION  go to state 31


State 76

   29 Block: LeftCurly DeclList • RightCurly

    RightCurly  shift, and go to state 102


State 77

   16 CONDITIONWHILE: LeftPar CONDITIONWHILE • RightPar

    RightPar  shift, and go to state 103


State 78

   14 WhileStmt: WHILE CONDITIONWHILE Block •

    $default  reduce using rule 14 (WhileStmt)


State 79

   15 CONDITIONWHILE: TestExpr TestOp • TestExpr

    ID       shift, and go to state 26
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 28

    TestExpr   go to state 104
    OPERATION  go to state 31


State 80

   57 Function: TYPE ID LeftPar @2 • ParamDecl @3 RightPar Block

    TYPE  shift, and go to state 105

    $default  reduce using rule 51 (ParamDecl)

    ParamDecl     go to state 106
    ParamDeclEnd  go to state 107


State 81

    9 ArrayDecl: TYPE ID LeftBracket NUMBER • RightBracket SEMICOLON

    RightBracket  shift, and go to state 108


State 82

   43 OPERATION: ID • PLUS_OP OPERATION
   44          | ID • SUB_OP OPERATION
   45          | ID • MULT_OP OPERATION
   46          | ID • DIV_OP OPERATION
   47          | ID • CAR_OP OPERATION
   50          | ID •

    PLUS_OP  shift, and go to state 55
    SUB_OP   shift, and go to state 56
    MULT_OP  shift, and go to state 57
    DIV_OP   shift, and go to state 58
    CAR_OP   shift, and go to state 59

    $default  reduce using rule 50 (OPERATION)


State 83

   37 OPERATION: LeftPar OPERATION • RightPar
   48          | LeftPar OPERATION • RightPar PLUS_OP OPERATION

    RightPar  shift, and go to state 94


State 84

   68 CallParam: ID COMMA • CallParam

    ID  shift, and go to state 51

    $default  reduce using rule 67 (CallParam)

    CallParam     go to state 109
    CallParamEnd  go to state 53


State 85

   71 FuncCall: ID LeftPar CallParam RightPar •

    $default  reduce using rule 71 (FuncCall)


State 86

   61 Expr: ID LeftBracket NUMBER RightBracket • EQ OPERATION
   62     | ID LeftBracket NUMBER RightBracket • EQ CHAR
   63     | ID LeftBracket NUMBER RightBracket • EQ FLOAT

    EQ  shift, and go to state 110


State 87

   43 OPERATION: ID PLUS_OP OPERATION •

    $default  reduce using rule 43 (OPERATION)


State 88

   44 OPERATION: ID SUB_OP OPERATION •

    $default  reduce using rule 44 (OPERATION)


State 89

   45 OPERATION: ID MULT_OP OPERATION •

    $default  reduce using rule 45 (OPERATION)


State 90

   46 OPERATION: ID DIV_OP OPERATION •

    $default  reduce using rule 46 (OPERATION)


State 91

   47 OPERATION: ID CAR_OP OPERATION •

    $default  reduce using rule 47 (OPERATION)


State 92

   21 TestExpr: ID LeftBracket TestExpr • RightBracket

    RightBracket  shift, and go to state 111


State 93

   18 CONDITIONIF: LeftPar CONDITIONIF RightPar •

    $default  reduce using rule 18 (CONDITIONIF)


State 94

   37 OPERATION: LeftPar OPERATION RightPar •
   48          | LeftPar OPERATION RightPar • PLUS_OP OPERATION

    PLUS_OP  shift, and go to state 112

    $default  reduce using rule 37 (OPERATION)


State 95

   38 OPERATION: NUMBER PLUS_OP OPERATION •

    $default  reduce using rule 38 (OPERATION)


State 96

   39 OPERATION: NUMBER SUB_OP OPERATION •

    $default  reduce using rule 39 (OPERATION)


State 97

   40 OPERATION: NUMBER MULT_OP OPERATION •

    $default  reduce using rule 40 (OPERATION)


State 98

   41 OPERATION: NUMBER DIV_OP OPERATION •

    $default  reduce using rule 41 (OPERATION)


State 99

   42 OPERATION: NUMBER CAR_OP OPERATION •

    $default  reduce using rule 42 (OPERATION)


State 100

   11 IfStmt: IF CONDITIONIF Block @1 • ElseStmt

    ELSE  shift, and go to state 6

    ELSE      [reduce using rule 13 (ElseStmt)]
    $default  reduce using rule 13 (ElseStmt)

    ElseStmt  go to state 113


State 101

   17 CONDITIONIF: TestExpr TestOp TestExpr •

    $default  reduce using rule 17 (CONDITIONIF)


State 102

   29 Block: LeftCurly DeclList RightCurly •

    $default  reduce using rule 29 (Block)


State 103

   16 CONDITIONWHILE: LeftPar CONDITIONWHILE RightPar •

    $default  reduce using rule 16 (CONDITIONWHILE)


State 104

   15 CONDITIONWHILE: TestExpr TestOp TestExpr •

    $default  reduce using rule 15 (CONDITIONWHILE)


State 105

   52 ParamDecl: TYPE • ID COMMA ParamDecl
   54 ParamDeclEnd: TYPE • ID

    ID  shift, and go to state 114


State 106

   57 Function: TYPE ID LeftPar @2 ParamDecl • @3 RightPar Block

    $default  reduce using rule 56 (@3)

    @3  go to state 115


State 107

   53 ParamDecl: ParamDeclEnd •

    $default  reduce using rule 53 (ParamDecl)


State 108

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket • SEMICOLON

    SEMICOLON  shift, and go to state 116


State 109

   68 CallParam: ID COMMA CallParam •

    $default  reduce using rule 68 (CallParam)


State 110

   61 Expr: ID LeftBracket NUMBER RightBracket EQ • OPERATION
   62     | ID LeftBracket NUMBER RightBracket EQ • CHAR
   63     | ID LeftBracket NUMBER RightBracket EQ • FLOAT

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    CHAR     shift, and go to state 117
    NUMBER   shift, and go to state 47
    FLOAT    shift, and go to state 118

    OPERATION  go to state 119


State 111

   21 TestExpr: ID LeftBracket TestExpr RightBracket •

    $default  reduce using rule 21 (TestExpr)


State 112

   48 OPERATION: LeftPar OPERATION RightPar PLUS_OP • OPERATION

    ID       shift, and go to state 82
    LeftPar  shift, and go to state 45
    NUMBER   shift, and go to state 47

    OPERATION  go to state 120


State 113

   11 IfStmt: IF CONDITIONIF Block @1 ElseStmt •

    $default  reduce using rule 11 (IfStmt)


State 114

   52 ParamDecl: TYPE ID • COMMA ParamDecl
   54 ParamDeclEnd: TYPE ID •

    COMMA  shift, and go to state 121

    $default  reduce using rule 54 (ParamDeclEnd)


State 115

   57 Function: TYPE ID LeftPar @2 ParamDecl @3 • RightPar Block

    RightPar  shift, and go to state 122


State 116

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON •

    $default  reduce using rule 9 (ArrayDecl)


State 117

   62 Expr: ID LeftBracket NUMBER RightBracket EQ CHAR •

    $default  reduce using rule 62 (Expr)


State 118

   63 Expr: ID LeftBracket NUMBER RightBracket EQ FLOAT •

    $default  reduce using rule 63 (Expr)


State 119

   61 Expr: ID LeftBracket NUMBER RightBracket EQ OPERATION •

    $default  reduce using rule 61 (Expr)


State 120

   48 OPERATION: LeftPar OPERATION RightPar PLUS_OP OPERATION •

    $default  reduce using rule 48 (OPERATION)


State 121

   52 ParamDecl: TYPE ID COMMA • ParamDecl

    TYPE  shift, and go to state 105

    $default  reduce using rule 51 (ParamDecl)

    ParamDecl     go to state 123
    ParamDeclEnd  go to state 107


State 122

   57 Function: TYPE ID LeftPar @2 ParamDecl @3 RightPar • Block

    LeftCurly  shift, and go to state 32

    Block  go to state 124


State 123

   52 ParamDecl: TYPE ID COMMA ParamDecl •

    $default  reduce using rule 52 (ParamDecl)


State 124

   57 Function: TYPE ID LeftPar @2 ParamDecl @3 RightPar Block •

    $default  reduce using rule 57 (Function)
