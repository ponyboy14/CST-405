Nonterminals useless in grammar

    FuncBlock


Terminals unused in grammar

    DOT
    QUOTE
    WRITELN
    READ
    RETURN
    BOOL
    TRUE
    FALSE


Rules useless in grammar

   70 FuncBlock: LeftCurly DeclList RETURN ID SEMICOLON RightCurly


State 0 conflicts: 6 shift/reduce
State 9 conflicts: 6 shift/reduce, 2 reduce/reduce
State 16 conflicts: 5 shift/reduce
State 25 conflicts: 9 reduce/reduce
State 27 conflicts: 9 reduce/reduce
State 66 conflicts: 6 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: VarDecl
    5     | Function
    6     | StmtList
    7     | ArrayDecl

    8 VarDecl: TYPE ID SEMICOLON

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON

   10 IfStmt: IF CONDITIONIF Block

   11 ElseStmt: IfStmt ELSE Block

   12 WhileStmt: WHILE CONDITIONWHILE Block

   13 CONDITIONWHILE: TestExpr TestOp TestExpr
   14               | LeftPar CONDITIONWHILE RightPar

   15 CONDITIONIF: TestExpr TestOp TestExpr
   16            | LeftPar CONDITIONIF RightPar

   17 TestExpr: ID
   18         | NUMBER
   19         | ID LeftBracket TestExpr RightBracket
   20         | OPERATION

   21 TestOp: EQ_COND
   22       | GREATER
   23       | LESS
   24       | GREATER_EQ
   25       | LESS_EQ
   26       | NOT

   27 Block: LeftCurly DeclList RightCurly

   28 StmtList: ε
   29         | Stmt StmtList

   30 Stmt: SEMICOLON
   31     | Expr SEMICOLON
   32     | IfStmt
   33     | ElseStmt
   34     | WhileStmt

   35 OPERATION: LeftPar OPERATION RightPar
   36          | NUMBER PLUS_OP OPERATION
   37          | NUMBER SUB_OP OPERATION
   38          | NUMBER MULT_OP OPERATION
   39          | NUMBER DIV_OP OPERATION
   40          | NUMBER CAR_OP OPERATION
   41          | ID PLUS_OP OPERATION
   42          | ID SUB_OP OPERATION
   43          | ID MULT_OP OPERATION
   44          | ID DIV_OP OPERATION
   45          | ID CAR_OP OPERATION
   46          | LeftPar OPERATION RightPar PLUS_OP OPERATION
   47          | NUMBER
   48          | ID

   49 ParamDecl: ε
   50          | TYPE ID COMMA ParamDecl
   51          | ParamDeclEnd

   52 ParamDeclEnd: TYPE ID

   53 @1: ε

   54 @2: ε

   55 Function: TYPE ID LeftPar @1 ParamDecl @2 RightPar Block

   56 Expr: ID EQ OPERATION
   57     | ID EQ CHAR
   58     | ID EQ FLOAT
   59     | ID LeftBracket NUMBER RightBracket EQ OPERATION
   60     | ID LeftBracket NUMBER RightBracket EQ CHAR
   61     | ID LeftBracket NUMBER RightBracket EQ FLOAT
   62     | ID EQ FuncCall
   63     | WRITE ID
   64     | FuncCall

   65 CallParam: ε
   66          | ID COMMA CallParam
   67          | CallParamEnd

   68 CallParamEnd: ID

   69 FuncCall: ID LeftPar CallParam RightPar


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 8 9 50 52 55
    ID <string> (259) 8 9 17 19 41 42 43 44 45 48 50 52 55 56 57 58 59 60 61 62 63 66 68 69
    SEMICOLON <character> (260) 8 9 30 31
    EQ <string> (261) 56 57 58 59 60 61 62
    PLUS_OP <string> (262) 36 41 46
    SUB_OP <string> (263) 37 42
    MULT_OP <string> (264) 38 43
    DIV_OP <string> (265) 39 44
    CAR_OP <string> (266) 40 45
    LeftPar <string> (267) 14 16 35 46 55 69
    RightPar <character> (268) 14 16 35 46 55 69
    LeftCurly <string> (269) 27
    RightCurly <string> (270) 27
    LeftBracket <string> (271) 9 19 59 60 61
    RightBracket <string> (272) 9 19 59 60 61
    COMMA <string> (273) 50 66
    EQ_COND <string> (274) 21
    GREATER <string> (275) 22
    LESS <string> (276) 23
    GREATER_EQ <string> (277) 24
    LESS_EQ <string> (278) 25
    NOT <string> (279) 26
    DOT <string> (280)
    CHAR <string> (281) 57 60
    QUOTE <string> (282)
    NUMBER <number> (283) 9 18 36 37 38 39 40 47 59 60 61
    FLOAT <string> (284) 58 61
    WRITE <string> (285) 63
    WRITELN <string> (286)
    READ <string> (287)
    RETURN <string> (288)
    IF <string> (289) 10
    ELSE <string> (290) 11
    WHILE <string> (291) 12
    BOOL <string> (292)
    TRUE <string> (293)
    FALSE <string> (294)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    Program <ast> (41)
        on left: 1
        on right: 0
    DeclList <ast> (42)
        on left: 2 3
        on right: 1 2 27
    Decl <ast> (43)
        on left: 4 5 6 7
        on right: 2 3
    VarDecl <ast> (44)
        on left: 8
        on right: 4
    ArrayDecl <ast> (45)
        on left: 9
        on right: 7
    IfStmt <ast> (46)
        on left: 10
        on right: 11 32
    ElseStmt <ast> (47)
        on left: 11
        on right: 33
    WhileStmt <ast> (48)
        on left: 12
        on right: 34
    CONDITIONWHILE <ast> (49)
        on left: 13 14
        on right: 12 14
    CONDITIONIF <ast> (50)
        on left: 15 16
        on right: 10 16
    TestExpr <ast> (51)
        on left: 17 18 19 20
        on right: 13 15 19
    TestOp <ast> (52)
        on left: 21 22 23 24 25 26
        on right: 13 15
    Block <ast> (53)
        on left: 27
        on right: 10 11 12 55
    StmtList <ast> (54)
        on left: 28 29
        on right: 6 29
    Stmt <ast> (55)
        on left: 30 31 32 33 34
        on right: 29
    OPERATION <ast> (56)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48
        on right: 20 35 36 37 38 39 40 41 42 43 44 45 46 56 59
    ParamDecl <ast> (57)
        on left: 49 50 51
        on right: 50 55
    ParamDeclEnd <ast> (58)
        on left: 52
        on right: 51
    Function <ast> (59)
        on left: 55
        on right: 5
    @1 (60)
        on left: 53
        on right: 55
    @2 (61)
        on left: 54
        on right: 55
    Expr <ast> (62)
        on left: 56 57 58 59 60 61 62 63 64
        on right: 31
    CallParam <ast> (63)
        on left: 65 66 67
        on right: 66 69
    CallParamEnd <ast> (64)
        on left: 68
        on right: 67
    FuncCall <ast> (65)
        on left: 69
        on right: 62 64


State 0

    0 $accept: • Program $end

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6

    TYPE       [reduce using rule 28 (StmtList)]
    ID         [reduce using rule 28 (StmtList)]
    SEMICOLON  [reduce using rule 28 (StmtList)]
    WRITE      [reduce using rule 28 (StmtList)]
    IF         [reduce using rule 28 (StmtList)]
    WHILE      [reduce using rule 28 (StmtList)]
    $default   reduce using rule 28 (StmtList)

    Program    go to state 7
    DeclList   go to state 8
    Decl       go to state 9
    VarDecl    go to state 10
    ArrayDecl  go to state 11
    IfStmt     go to state 12
    ElseStmt   go to state 13
    WhileStmt  go to state 14
    StmtList   go to state 15
    Stmt       go to state 16
    Function   go to state 17
    Expr       go to state 18
    FuncCall   go to state 19


State 1

    8 VarDecl: TYPE • ID SEMICOLON
    9 ArrayDecl: TYPE • ID LeftBracket NUMBER RightBracket SEMICOLON
   55 Function: TYPE • ID LeftPar @1 ParamDecl @2 RightPar Block

    ID  shift, and go to state 20


State 2

   56 Expr: ID • EQ OPERATION
   57     | ID • EQ CHAR
   58     | ID • EQ FLOAT
   59     | ID • LeftBracket NUMBER RightBracket EQ OPERATION
   60     | ID • LeftBracket NUMBER RightBracket EQ CHAR
   61     | ID • LeftBracket NUMBER RightBracket EQ FLOAT
   62     | ID • EQ FuncCall
   69 FuncCall: ID • LeftPar CallParam RightPar

    EQ           shift, and go to state 21
    LeftPar      shift, and go to state 22
    LeftBracket  shift, and go to state 23


State 3

   30 Stmt: SEMICOLON •

    $default  reduce using rule 30 (Stmt)


State 4

   63 Expr: WRITE • ID

    ID  shift, and go to state 24


State 5

   10 IfStmt: IF • CONDITIONIF Block

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 26
    NUMBER   shift, and go to state 27

    CONDITIONIF  go to state 28
    TestExpr     go to state 29
    OPERATION    go to state 30


State 6

   12 WhileStmt: WHILE • CONDITIONWHILE Block

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 27

    CONDITIONWHILE  go to state 32
    TestExpr        go to state 33
    OPERATION       go to state 30


State 7

    0 $accept: Program • $end

    $end  shift, and go to state 34


State 8

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 9

    2 DeclList: Decl • DeclList
    3         | Decl •

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6

    $end        reduce using rule 3 (DeclList)
    $end        [reduce using rule 28 (StmtList)]
    TYPE        [reduce using rule 28 (StmtList)]
    ID          [reduce using rule 28 (StmtList)]
    SEMICOLON   [reduce using rule 28 (StmtList)]
    RightCurly  reduce using rule 3 (DeclList)
    RightCurly  [reduce using rule 28 (StmtList)]
    WRITE       [reduce using rule 28 (StmtList)]
    IF          [reduce using rule 28 (StmtList)]
    WHILE       [reduce using rule 28 (StmtList)]
    $default    reduce using rule 3 (DeclList)

    DeclList   go to state 35
    Decl       go to state 9
    VarDecl    go to state 10
    ArrayDecl  go to state 11
    IfStmt     go to state 12
    ElseStmt   go to state 13
    WhileStmt  go to state 14
    StmtList   go to state 15
    Stmt       go to state 16
    Function   go to state 17
    Expr       go to state 18
    FuncCall   go to state 19


State 10

    4 Decl: VarDecl •

    $default  reduce using rule 4 (Decl)


State 11

    7 Decl: ArrayDecl •

    $default  reduce using rule 7 (Decl)


State 12

   11 ElseStmt: IfStmt • ELSE Block
   32 Stmt: IfStmt •

    ELSE  shift, and go to state 36

    $default  reduce using rule 32 (Stmt)


State 13

   33 Stmt: ElseStmt •

    $default  reduce using rule 33 (Stmt)


State 14

   34 Stmt: WhileStmt •

    $default  reduce using rule 34 (Stmt)


State 15

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 16

   29 StmtList: Stmt • StmtList

    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6

    ID         [reduce using rule 28 (StmtList)]
    SEMICOLON  [reduce using rule 28 (StmtList)]
    WRITE      [reduce using rule 28 (StmtList)]
    IF         [reduce using rule 28 (StmtList)]
    WHILE      [reduce using rule 28 (StmtList)]
    $default   reduce using rule 28 (StmtList)

    IfStmt     go to state 12
    ElseStmt   go to state 13
    WhileStmt  go to state 14
    StmtList   go to state 37
    Stmt       go to state 16
    Expr       go to state 18
    FuncCall   go to state 19


State 17

    5 Decl: Function •

    $default  reduce using rule 5 (Decl)


State 18

   31 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 38


State 19

   64 Expr: FuncCall •

    $default  reduce using rule 64 (Expr)


State 20

    8 VarDecl: TYPE ID • SEMICOLON
    9 ArrayDecl: TYPE ID • LeftBracket NUMBER RightBracket SEMICOLON
   55 Function: TYPE ID • LeftPar @1 ParamDecl @2 RightPar Block

    SEMICOLON    shift, and go to state 39
    LeftPar      shift, and go to state 40
    LeftBracket  shift, and go to state 41


State 21

   56 Expr: ID EQ • OPERATION
   57     | ID EQ • CHAR
   58     | ID EQ • FLOAT
   62     | ID EQ • FuncCall

    ID       shift, and go to state 42
    LeftPar  shift, and go to state 43
    CHAR     shift, and go to state 44
    NUMBER   shift, and go to state 45
    FLOAT    shift, and go to state 46

    OPERATION  go to state 47
    FuncCall   go to state 48


State 22

   69 FuncCall: ID LeftPar • CallParam RightPar

    ID  shift, and go to state 49

    $default  reduce using rule 65 (CallParam)

    CallParam     go to state 50
    CallParamEnd  go to state 51


State 23

   59 Expr: ID LeftBracket • NUMBER RightBracket EQ OPERATION
   60     | ID LeftBracket • NUMBER RightBracket EQ CHAR
   61     | ID LeftBracket • NUMBER RightBracket EQ FLOAT

    NUMBER  shift, and go to state 52


State 24

   63 Expr: WRITE ID •

    $default  reduce using rule 63 (Expr)


State 25

   17 TestExpr: ID •
   19         | ID • LeftBracket TestExpr RightBracket
   41 OPERATION: ID • PLUS_OP OPERATION
   42          | ID • SUB_OP OPERATION
   43          | ID • MULT_OP OPERATION
   44          | ID • DIV_OP OPERATION
   45          | ID • CAR_OP OPERATION
   48          | ID •

    PLUS_OP      shift, and go to state 53
    SUB_OP       shift, and go to state 54
    MULT_OP      shift, and go to state 55
    DIV_OP       shift, and go to state 56
    CAR_OP       shift, and go to state 57
    LeftBracket  shift, and go to state 58

    RightPar      reduce using rule 17 (TestExpr)
    RightPar      [reduce using rule 48 (OPERATION)]
    LeftCurly     reduce using rule 17 (TestExpr)
    LeftCurly     [reduce using rule 48 (OPERATION)]
    RightBracket  reduce using rule 17 (TestExpr)
    RightBracket  [reduce using rule 48 (OPERATION)]
    EQ_COND       reduce using rule 17 (TestExpr)
    EQ_COND       [reduce using rule 48 (OPERATION)]
    GREATER       reduce using rule 17 (TestExpr)
    GREATER       [reduce using rule 48 (OPERATION)]
    LESS          reduce using rule 17 (TestExpr)
    LESS          [reduce using rule 48 (OPERATION)]
    GREATER_EQ    reduce using rule 17 (TestExpr)
    GREATER_EQ    [reduce using rule 48 (OPERATION)]
    LESS_EQ       reduce using rule 17 (TestExpr)
    LESS_EQ       [reduce using rule 48 (OPERATION)]
    NOT           reduce using rule 17 (TestExpr)
    NOT           [reduce using rule 48 (OPERATION)]
    $default      reduce using rule 17 (TestExpr)


State 26

   16 CONDITIONIF: LeftPar • CONDITIONIF RightPar
   35 OPERATION: LeftPar • OPERATION RightPar
   46          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 26
    NUMBER   shift, and go to state 27

    CONDITIONIF  go to state 59
    TestExpr     go to state 29
    OPERATION    go to state 60


State 27

   18 TestExpr: NUMBER •
   36 OPERATION: NUMBER • PLUS_OP OPERATION
   37          | NUMBER • SUB_OP OPERATION
   38          | NUMBER • MULT_OP OPERATION
   39          | NUMBER • DIV_OP OPERATION
   40          | NUMBER • CAR_OP OPERATION
   47          | NUMBER •

    PLUS_OP  shift, and go to state 61
    SUB_OP   shift, and go to state 62
    MULT_OP  shift, and go to state 63
    DIV_OP   shift, and go to state 64
    CAR_OP   shift, and go to state 65

    RightPar      reduce using rule 18 (TestExpr)
    RightPar      [reduce using rule 47 (OPERATION)]
    LeftCurly     reduce using rule 18 (TestExpr)
    LeftCurly     [reduce using rule 47 (OPERATION)]
    RightBracket  reduce using rule 18 (TestExpr)
    RightBracket  [reduce using rule 47 (OPERATION)]
    EQ_COND       reduce using rule 18 (TestExpr)
    EQ_COND       [reduce using rule 47 (OPERATION)]
    GREATER       reduce using rule 18 (TestExpr)
    GREATER       [reduce using rule 47 (OPERATION)]
    LESS          reduce using rule 18 (TestExpr)
    LESS          [reduce using rule 47 (OPERATION)]
    GREATER_EQ    reduce using rule 18 (TestExpr)
    GREATER_EQ    [reduce using rule 47 (OPERATION)]
    LESS_EQ       reduce using rule 18 (TestExpr)
    LESS_EQ       [reduce using rule 47 (OPERATION)]
    NOT           reduce using rule 18 (TestExpr)
    NOT           [reduce using rule 47 (OPERATION)]
    $default      reduce using rule 18 (TestExpr)


State 28

   10 IfStmt: IF CONDITIONIF • Block

    LeftCurly  shift, and go to state 66

    Block  go to state 67


State 29

   15 CONDITIONIF: TestExpr • TestOp TestExpr

    EQ_COND     shift, and go to state 68
    GREATER     shift, and go to state 69
    LESS        shift, and go to state 70
    GREATER_EQ  shift, and go to state 71
    LESS_EQ     shift, and go to state 72
    NOT         shift, and go to state 73

    TestOp  go to state 74


State 30

   20 TestExpr: OPERATION •

    $default  reduce using rule 20 (TestExpr)


State 31

   14 CONDITIONWHILE: LeftPar • CONDITIONWHILE RightPar
   35 OPERATION: LeftPar • OPERATION RightPar
   46          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 31
    NUMBER   shift, and go to state 27

    CONDITIONWHILE  go to state 75
    TestExpr        go to state 33
    OPERATION       go to state 60


State 32

   12 WhileStmt: WHILE CONDITIONWHILE • Block

    LeftCurly  shift, and go to state 66

    Block  go to state 76


State 33

   13 CONDITIONWHILE: TestExpr • TestOp TestExpr

    EQ_COND     shift, and go to state 68
    GREATER     shift, and go to state 69
    LESS        shift, and go to state 70
    GREATER_EQ  shift, and go to state 71
    LESS_EQ     shift, and go to state 72
    NOT         shift, and go to state 73

    TestOp  go to state 77


State 34

    0 $accept: Program $end •

    $default  accept


State 35

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 36

   11 ElseStmt: IfStmt ELSE • Block

    LeftCurly  shift, and go to state 66

    Block  go to state 78


State 37

   29 StmtList: Stmt StmtList •

    $default  reduce using rule 29 (StmtList)


State 38

   31 Stmt: Expr SEMICOLON •

    $default  reduce using rule 31 (Stmt)


State 39

    8 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 8 (VarDecl)


State 40

   55 Function: TYPE ID LeftPar • @1 ParamDecl @2 RightPar Block

    $default  reduce using rule 53 (@1)

    @1  go to state 79


State 41

    9 ArrayDecl: TYPE ID LeftBracket • NUMBER RightBracket SEMICOLON

    NUMBER  shift, and go to state 80


State 42

   41 OPERATION: ID • PLUS_OP OPERATION
   42          | ID • SUB_OP OPERATION
   43          | ID • MULT_OP OPERATION
   44          | ID • DIV_OP OPERATION
   45          | ID • CAR_OP OPERATION
   48          | ID •
   69 FuncCall: ID • LeftPar CallParam RightPar

    PLUS_OP  shift, and go to state 53
    SUB_OP   shift, and go to state 54
    MULT_OP  shift, and go to state 55
    DIV_OP   shift, and go to state 56
    CAR_OP   shift, and go to state 57
    LeftPar  shift, and go to state 22

    $default  reduce using rule 48 (OPERATION)


State 43

   35 OPERATION: LeftPar • OPERATION RightPar
   46          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 82


State 44

   57 Expr: ID EQ CHAR •

    $default  reduce using rule 57 (Expr)


State 45

   36 OPERATION: NUMBER • PLUS_OP OPERATION
   37          | NUMBER • SUB_OP OPERATION
   38          | NUMBER • MULT_OP OPERATION
   39          | NUMBER • DIV_OP OPERATION
   40          | NUMBER • CAR_OP OPERATION
   47          | NUMBER •

    PLUS_OP  shift, and go to state 61
    SUB_OP   shift, and go to state 62
    MULT_OP  shift, and go to state 63
    DIV_OP   shift, and go to state 64
    CAR_OP   shift, and go to state 65

    $default  reduce using rule 47 (OPERATION)


State 46

   58 Expr: ID EQ FLOAT •

    $default  reduce using rule 58 (Expr)


State 47

   56 Expr: ID EQ OPERATION •

    $default  reduce using rule 56 (Expr)


State 48

   62 Expr: ID EQ FuncCall •

    $default  reduce using rule 62 (Expr)


State 49

   66 CallParam: ID • COMMA CallParam
   68 CallParamEnd: ID •

    COMMA  shift, and go to state 83

    $default  reduce using rule 68 (CallParamEnd)


State 50

   69 FuncCall: ID LeftPar CallParam • RightPar

    RightPar  shift, and go to state 84


State 51

   67 CallParam: CallParamEnd •

    $default  reduce using rule 67 (CallParam)


State 52

   59 Expr: ID LeftBracket NUMBER • RightBracket EQ OPERATION
   60     | ID LeftBracket NUMBER • RightBracket EQ CHAR
   61     | ID LeftBracket NUMBER • RightBracket EQ FLOAT

    RightBracket  shift, and go to state 85


State 53

   41 OPERATION: ID PLUS_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 86


State 54

   42 OPERATION: ID SUB_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 87


State 55

   43 OPERATION: ID MULT_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 88


State 56

   44 OPERATION: ID DIV_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 89


State 57

   45 OPERATION: ID CAR_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 90


State 58

   19 TestExpr: ID LeftBracket • TestExpr RightBracket

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 27

    TestExpr   go to state 91
    OPERATION  go to state 30


State 59

   16 CONDITIONIF: LeftPar CONDITIONIF • RightPar

    RightPar  shift, and go to state 92


State 60

   20 TestExpr: OPERATION •
   35 OPERATION: LeftPar OPERATION • RightPar
   46          | LeftPar OPERATION • RightPar PLUS_OP OPERATION

    RightPar  shift, and go to state 93

    $default  reduce using rule 20 (TestExpr)


State 61

   36 OPERATION: NUMBER PLUS_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 94


State 62

   37 OPERATION: NUMBER SUB_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 95


State 63

   38 OPERATION: NUMBER MULT_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 96


State 64

   39 OPERATION: NUMBER DIV_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 97


State 65

   40 OPERATION: NUMBER CAR_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 98


State 66

   27 Block: LeftCurly • DeclList RightCurly

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4
    IF         shift, and go to state 5
    WHILE      shift, and go to state 6

    TYPE       [reduce using rule 28 (StmtList)]
    ID         [reduce using rule 28 (StmtList)]
    SEMICOLON  [reduce using rule 28 (StmtList)]
    WRITE      [reduce using rule 28 (StmtList)]
    IF         [reduce using rule 28 (StmtList)]
    WHILE      [reduce using rule 28 (StmtList)]
    $default   reduce using rule 28 (StmtList)

    DeclList   go to state 99
    Decl       go to state 9
    VarDecl    go to state 10
    ArrayDecl  go to state 11
    IfStmt     go to state 12
    ElseStmt   go to state 13
    WhileStmt  go to state 14
    StmtList   go to state 15
    Stmt       go to state 16
    Function   go to state 17
    Expr       go to state 18
    FuncCall   go to state 19


State 67

   10 IfStmt: IF CONDITIONIF Block •

    $default  reduce using rule 10 (IfStmt)


State 68

   21 TestOp: EQ_COND •

    $default  reduce using rule 21 (TestOp)


State 69

   22 TestOp: GREATER •

    $default  reduce using rule 22 (TestOp)


State 70

   23 TestOp: LESS •

    $default  reduce using rule 23 (TestOp)


State 71

   24 TestOp: GREATER_EQ •

    $default  reduce using rule 24 (TestOp)


State 72

   25 TestOp: LESS_EQ •

    $default  reduce using rule 25 (TestOp)


State 73

   26 TestOp: NOT •

    $default  reduce using rule 26 (TestOp)


State 74

   15 CONDITIONIF: TestExpr TestOp • TestExpr

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 27

    TestExpr   go to state 100
    OPERATION  go to state 30


State 75

   14 CONDITIONWHILE: LeftPar CONDITIONWHILE • RightPar

    RightPar  shift, and go to state 101


State 76

   12 WhileStmt: WHILE CONDITIONWHILE Block •

    $default  reduce using rule 12 (WhileStmt)


State 77

   13 CONDITIONWHILE: TestExpr TestOp • TestExpr

    ID       shift, and go to state 25
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 27

    TestExpr   go to state 102
    OPERATION  go to state 30


State 78

   11 ElseStmt: IfStmt ELSE Block •

    $default  reduce using rule 11 (ElseStmt)


State 79

   55 Function: TYPE ID LeftPar @1 • ParamDecl @2 RightPar Block

    TYPE  shift, and go to state 103

    $default  reduce using rule 49 (ParamDecl)

    ParamDecl     go to state 104
    ParamDeclEnd  go to state 105


State 80

    9 ArrayDecl: TYPE ID LeftBracket NUMBER • RightBracket SEMICOLON

    RightBracket  shift, and go to state 106


State 81

   41 OPERATION: ID • PLUS_OP OPERATION
   42          | ID • SUB_OP OPERATION
   43          | ID • MULT_OP OPERATION
   44          | ID • DIV_OP OPERATION
   45          | ID • CAR_OP OPERATION
   48          | ID •

    PLUS_OP  shift, and go to state 53
    SUB_OP   shift, and go to state 54
    MULT_OP  shift, and go to state 55
    DIV_OP   shift, and go to state 56
    CAR_OP   shift, and go to state 57

    $default  reduce using rule 48 (OPERATION)


State 82

   35 OPERATION: LeftPar OPERATION • RightPar
   46          | LeftPar OPERATION • RightPar PLUS_OP OPERATION

    RightPar  shift, and go to state 93


State 83

   66 CallParam: ID COMMA • CallParam

    ID  shift, and go to state 49

    $default  reduce using rule 65 (CallParam)

    CallParam     go to state 107
    CallParamEnd  go to state 51


State 84

   69 FuncCall: ID LeftPar CallParam RightPar •

    $default  reduce using rule 69 (FuncCall)


State 85

   59 Expr: ID LeftBracket NUMBER RightBracket • EQ OPERATION
   60     | ID LeftBracket NUMBER RightBracket • EQ CHAR
   61     | ID LeftBracket NUMBER RightBracket • EQ FLOAT

    EQ  shift, and go to state 108


State 86

   41 OPERATION: ID PLUS_OP OPERATION •

    $default  reduce using rule 41 (OPERATION)


State 87

   42 OPERATION: ID SUB_OP OPERATION •

    $default  reduce using rule 42 (OPERATION)


State 88

   43 OPERATION: ID MULT_OP OPERATION •

    $default  reduce using rule 43 (OPERATION)


State 89

   44 OPERATION: ID DIV_OP OPERATION •

    $default  reduce using rule 44 (OPERATION)


State 90

   45 OPERATION: ID CAR_OP OPERATION •

    $default  reduce using rule 45 (OPERATION)


State 91

   19 TestExpr: ID LeftBracket TestExpr • RightBracket

    RightBracket  shift, and go to state 109


State 92

   16 CONDITIONIF: LeftPar CONDITIONIF RightPar •

    $default  reduce using rule 16 (CONDITIONIF)


State 93

   35 OPERATION: LeftPar OPERATION RightPar •
   46          | LeftPar OPERATION RightPar • PLUS_OP OPERATION

    PLUS_OP  shift, and go to state 110

    $default  reduce using rule 35 (OPERATION)


State 94

   36 OPERATION: NUMBER PLUS_OP OPERATION •

    $default  reduce using rule 36 (OPERATION)


State 95

   37 OPERATION: NUMBER SUB_OP OPERATION •

    $default  reduce using rule 37 (OPERATION)


State 96

   38 OPERATION: NUMBER MULT_OP OPERATION •

    $default  reduce using rule 38 (OPERATION)


State 97

   39 OPERATION: NUMBER DIV_OP OPERATION •

    $default  reduce using rule 39 (OPERATION)


State 98

   40 OPERATION: NUMBER CAR_OP OPERATION •

    $default  reduce using rule 40 (OPERATION)


State 99

   27 Block: LeftCurly DeclList • RightCurly

    RightCurly  shift, and go to state 111


State 100

   15 CONDITIONIF: TestExpr TestOp TestExpr •

    $default  reduce using rule 15 (CONDITIONIF)


State 101

   14 CONDITIONWHILE: LeftPar CONDITIONWHILE RightPar •

    $default  reduce using rule 14 (CONDITIONWHILE)


State 102

   13 CONDITIONWHILE: TestExpr TestOp TestExpr •

    $default  reduce using rule 13 (CONDITIONWHILE)


State 103

   50 ParamDecl: TYPE • ID COMMA ParamDecl
   52 ParamDeclEnd: TYPE • ID

    ID  shift, and go to state 112


State 104

   55 Function: TYPE ID LeftPar @1 ParamDecl • @2 RightPar Block

    $default  reduce using rule 54 (@2)

    @2  go to state 113


State 105

   51 ParamDecl: ParamDeclEnd •

    $default  reduce using rule 51 (ParamDecl)


State 106

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket • SEMICOLON

    SEMICOLON  shift, and go to state 114


State 107

   66 CallParam: ID COMMA CallParam •

    $default  reduce using rule 66 (CallParam)


State 108

   59 Expr: ID LeftBracket NUMBER RightBracket EQ • OPERATION
   60     | ID LeftBracket NUMBER RightBracket EQ • CHAR
   61     | ID LeftBracket NUMBER RightBracket EQ • FLOAT

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    CHAR     shift, and go to state 115
    NUMBER   shift, and go to state 45
    FLOAT    shift, and go to state 116

    OPERATION  go to state 117


State 109

   19 TestExpr: ID LeftBracket TestExpr RightBracket •

    $default  reduce using rule 19 (TestExpr)


State 110

   46 OPERATION: LeftPar OPERATION RightPar PLUS_OP • OPERATION

    ID       shift, and go to state 81
    LeftPar  shift, and go to state 43
    NUMBER   shift, and go to state 45

    OPERATION  go to state 118


State 111

   27 Block: LeftCurly DeclList RightCurly •

    $default  reduce using rule 27 (Block)


State 112

   50 ParamDecl: TYPE ID • COMMA ParamDecl
   52 ParamDeclEnd: TYPE ID •

    COMMA  shift, and go to state 119

    $default  reduce using rule 52 (ParamDeclEnd)


State 113

   55 Function: TYPE ID LeftPar @1 ParamDecl @2 • RightPar Block

    RightPar  shift, and go to state 120


State 114

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON •

    $default  reduce using rule 9 (ArrayDecl)


State 115

   60 Expr: ID LeftBracket NUMBER RightBracket EQ CHAR •

    $default  reduce using rule 60 (Expr)


State 116

   61 Expr: ID LeftBracket NUMBER RightBracket EQ FLOAT •

    $default  reduce using rule 61 (Expr)


State 117

   59 Expr: ID LeftBracket NUMBER RightBracket EQ OPERATION •

    $default  reduce using rule 59 (Expr)


State 118

   46 OPERATION: LeftPar OPERATION RightPar PLUS_OP OPERATION •

    $default  reduce using rule 46 (OPERATION)


State 119

   50 ParamDecl: TYPE ID COMMA • ParamDecl

    TYPE  shift, and go to state 103

    $default  reduce using rule 49 (ParamDecl)

    ParamDecl     go to state 121
    ParamDeclEnd  go to state 105


State 120

   55 Function: TYPE ID LeftPar @1 ParamDecl @2 RightPar • Block

    LeftCurly  shift, and go to state 66

    Block  go to state 122


State 121

   50 ParamDecl: TYPE ID COMMA ParamDecl •

    $default  reduce using rule 50 (ParamDecl)


State 122

   55 Function: TYPE ID LeftPar @1 ParamDecl @2 RightPar Block •

    $default  reduce using rule 55 (Function)
