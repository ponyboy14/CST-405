Terminals unused in grammar

    DOT
    QUOTE
    FLOAT
    WRITELN
    READ


Rules useless in parser due to conflicts

   35 Expr: ID EQ ID


State 0 conflicts: 4 shift/reduce
State 7 conflicts: 4 shift/reduce, 2 reduce/reduce
State 11 conflicts: 3 shift/reduce
State 27 conflicts: 1 reduce/reduce
State 80 conflicts: 4 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: VarDecl
    5     | Function
    6     | StmtList
    7     | ArrayDecl

    8 VarDecl: TYPE ID SEMICOLON

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON

   10 StmtList: ε
   11         | Stmt StmtList

   12 Stmt: SEMICOLON
   13     | Expr SEMICOLON

   14 OPERATION: LeftPar OPERATION RightPar
   15          | NUMBER PLUS_OP OPERATION
   16          | NUMBER SUB_OP OPERATION
   17          | NUMBER MULT_OP OPERATION
   18          | NUMBER DIV_OP OPERATION
   19          | NUMBER CAR_OP OPERATION
   20          | ID PLUS_OP OPERATION
   21          | ID SUB_OP OPERATION
   22          | ID MULT_OP OPERATION
   23          | ID DIV_OP OPERATION
   24          | ID CAR_OP OPERATION
   25          | LeftPar OPERATION RightPar PLUS_OP OPERATION
   26          | NUMBER
   27          | ID

   28 Block: LeftCurly DeclList RETURN ID SEMICOLON RightCurly

   29 ParamDecl: ε
   30          | TYPE ID COMMA ParamDecl
   31          | ParamDeclEnd

   32 ParamDeclEnd: TYPE ID

   33 $@1: ε

   34 Function: TYPE ID LeftPar ParamDecl $@1 RightPar Block

   35 Expr: ID EQ ID
   36     | ID EQ OPERATION
   37     | ID EQ CHAR
   38     | ID LeftBracket NUMBER RightBracket EQ OPERATION
   39     | ID EQ FuncCall
   40     | WRITE ID
   41     | FuncCall

   42 CallParam: ε
   43          | ID COMMA CallParam
   44          | CallParamEnd

   45 CallParamEnd: ID

   46 @2: ε

   47 @3: ε

   48 FuncCall: ID LeftPar @2 CallParam @3 RightPar


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 8 9 30 32 34
    ID <string> (259) 8 9 20 21 22 23 24 27 28 30 32 34 35 36 37 38 39 40 43 45 48
    SEMICOLON <char> (260) 8 9 12 13 28
    EQ <char> (261) 35 36 37 38 39
    PLUS_OP <char> (262) 15 20 25
    SUB_OP <char> (263) 16 21
    MULT_OP <char> (264) 17 22
    DIV_OP <char> (265) 18 23
    CAR_OP <char> (266) 19 24
    LeftPar <char> (267) 14 25 34 48
    RightPar <char> (268) 14 25 34 48
    LeftCurly <char> (269) 28
    RightCurly <char> (270) 28
    LeftBracket <char> (271) 9 38
    RightBracket <char> (272) 9 38
    COMMA <char> (273) 30 43
    DOT <char> (274)
    CHAR <char> (275) 37
    QUOTE <char> (276)
    NUMBER <number> (277) 9 15 16 17 18 19 26 38
    FLOAT <number> (278)
    WRITE <string> (279) 40
    WRITELN <string> (280)
    READ <string> (281)
    RETURN <string> (282) 28


Nonterminals, with rules where they appear

    $accept (28)
        on left: 0
    Program <ast> (29)
        on left: 1
        on right: 0
    DeclList <ast> (30)
        on left: 2 3
        on right: 1 2 28
    Decl <ast> (31)
        on left: 4 5 6 7
        on right: 2 3
    VarDecl <ast> (32)
        on left: 8
        on right: 4
    ArrayDecl <ast> (33)
        on left: 9
        on right: 7
    StmtList <ast> (34)
        on left: 10 11
        on right: 6 11
    Stmt <ast> (35)
        on left: 12 13
        on right: 11
    OPERATION <ast> (36)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 14 15 16 17 18 19 20 21 22 23 24 25 36 38
    Block <ast> (37)
        on left: 28
        on right: 34
    ParamDecl <ast> (38)
        on left: 29 30 31
        on right: 30 34
    ParamDeclEnd <ast> (39)
        on left: 32
        on right: 31
    Function <ast> (40)
        on left: 34
        on right: 5
    $@1 (41)
        on left: 33
        on right: 34
    Expr <ast> (42)
        on left: 35 36 37 38 39 40 41
        on right: 13
    CallParam <ast> (43)
        on left: 42 43 44
        on right: 43 48
    CallParamEnd <ast> (44)
        on left: 45
        on right: 44
    FuncCall <ast> (45)
        on left: 48
        on right: 39 41
    @2 (46)
        on left: 46
        on right: 48
    @3 (47)
        on left: 47
        on right: 48


State 0

    0 $accept: • Program $end

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    TYPE       [reduce using rule 10 (StmtList)]
    ID         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    $default   reduce using rule 10 (StmtList)

    Program    go to state 5
    DeclList   go to state 6
    Decl       go to state 7
    VarDecl    go to state 8
    ArrayDecl  go to state 9
    StmtList   go to state 10
    Stmt       go to state 11
    Function   go to state 12
    Expr       go to state 13
    FuncCall   go to state 14


State 1

    8 VarDecl: TYPE • ID SEMICOLON
    9 ArrayDecl: TYPE • ID LeftBracket NUMBER RightBracket SEMICOLON
   34 Function: TYPE • ID LeftPar ParamDecl $@1 RightPar Block

    ID  shift, and go to state 15


State 2

   35 Expr: ID • EQ ID
   36     | ID • EQ OPERATION
   37     | ID • EQ CHAR
   38     | ID • LeftBracket NUMBER RightBracket EQ OPERATION
   39     | ID • EQ FuncCall
   48 FuncCall: ID • LeftPar @2 CallParam @3 RightPar

    EQ           shift, and go to state 16
    LeftPar      shift, and go to state 17
    LeftBracket  shift, and go to state 18


State 3

   12 Stmt: SEMICOLON •

    $default  reduce using rule 12 (Stmt)


State 4

   40 Expr: WRITE • ID

    ID  shift, and go to state 19


State 5

    0 $accept: Program • $end

    $end  shift, and go to state 20


State 6

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 7

    2 DeclList: Decl • DeclList
    3         | Decl •

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    $end       reduce using rule 3 (DeclList)
    $end       [reduce using rule 10 (StmtList)]
    TYPE       [reduce using rule 10 (StmtList)]
    ID         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    RETURN     reduce using rule 3 (DeclList)
    RETURN     [reduce using rule 10 (StmtList)]
    $default   reduce using rule 3 (DeclList)

    DeclList   go to state 21
    Decl       go to state 7
    VarDecl    go to state 8
    ArrayDecl  go to state 9
    StmtList   go to state 10
    Stmt       go to state 11
    Function   go to state 12
    Expr       go to state 13
    FuncCall   go to state 14


State 8

    4 Decl: VarDecl •

    $default  reduce using rule 4 (Decl)


State 9

    7 Decl: ArrayDecl •

    $default  reduce using rule 7 (Decl)


State 10

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 11

   11 StmtList: Stmt • StmtList

    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    ID         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    $default   reduce using rule 10 (StmtList)

    StmtList  go to state 22
    Stmt      go to state 11
    Expr      go to state 13
    FuncCall  go to state 14


State 12

    5 Decl: Function •

    $default  reduce using rule 5 (Decl)


State 13

   13 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 23


State 14

   41 Expr: FuncCall •

    $default  reduce using rule 41 (Expr)


State 15

    8 VarDecl: TYPE ID • SEMICOLON
    9 ArrayDecl: TYPE ID • LeftBracket NUMBER RightBracket SEMICOLON
   34 Function: TYPE ID • LeftPar ParamDecl $@1 RightPar Block

    SEMICOLON    shift, and go to state 24
    LeftPar      shift, and go to state 25
    LeftBracket  shift, and go to state 26


State 16

   35 Expr: ID EQ • ID
   36     | ID EQ • OPERATION
   37     | ID EQ • CHAR
   39     | ID EQ • FuncCall

    ID       shift, and go to state 27
    LeftPar  shift, and go to state 28
    CHAR     shift, and go to state 29
    NUMBER   shift, and go to state 30

    OPERATION  go to state 31
    FuncCall   go to state 32


State 17

   48 FuncCall: ID LeftPar • @2 CallParam @3 RightPar

    $default  reduce using rule 46 (@2)

    @2  go to state 33


State 18

   38 Expr: ID LeftBracket • NUMBER RightBracket EQ OPERATION

    NUMBER  shift, and go to state 34


State 19

   40 Expr: WRITE ID •

    $default  reduce using rule 40 (Expr)


State 20

    0 $accept: Program $end •

    $default  accept


State 21

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 22

   11 StmtList: Stmt StmtList •

    $default  reduce using rule 11 (StmtList)


State 23

   13 Stmt: Expr SEMICOLON •

    $default  reduce using rule 13 (Stmt)


State 24

    8 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 8 (VarDecl)


State 25

   34 Function: TYPE ID LeftPar • ParamDecl $@1 RightPar Block

    TYPE  shift, and go to state 35

    $default  reduce using rule 29 (ParamDecl)

    ParamDecl     go to state 36
    ParamDeclEnd  go to state 37


State 26

    9 ArrayDecl: TYPE ID LeftBracket • NUMBER RightBracket SEMICOLON

    NUMBER  shift, and go to state 38


State 27

   20 OPERATION: ID • PLUS_OP OPERATION
   21          | ID • SUB_OP OPERATION
   22          | ID • MULT_OP OPERATION
   23          | ID • DIV_OP OPERATION
   24          | ID • CAR_OP OPERATION
   27          | ID •
   35 Expr: ID EQ ID •
   48 FuncCall: ID • LeftPar @2 CallParam @3 RightPar

    PLUS_OP  shift, and go to state 39
    SUB_OP   shift, and go to state 40
    MULT_OP  shift, and go to state 41
    DIV_OP   shift, and go to state 42
    CAR_OP   shift, and go to state 43
    LeftPar  shift, and go to state 17

    SEMICOLON  reduce using rule 27 (OPERATION)
    SEMICOLON  [reduce using rule 35 (Expr)]
    $default   reduce using rule 27 (OPERATION)


State 28

   14 OPERATION: LeftPar • OPERATION RightPar
   25          | LeftPar • OPERATION RightPar PLUS_OP OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 45


State 29

   37 Expr: ID EQ CHAR •

    $default  reduce using rule 37 (Expr)


State 30

   15 OPERATION: NUMBER • PLUS_OP OPERATION
   16          | NUMBER • SUB_OP OPERATION
   17          | NUMBER • MULT_OP OPERATION
   18          | NUMBER • DIV_OP OPERATION
   19          | NUMBER • CAR_OP OPERATION
   26          | NUMBER •

    PLUS_OP  shift, and go to state 46
    SUB_OP   shift, and go to state 47
    MULT_OP  shift, and go to state 48
    DIV_OP   shift, and go to state 49
    CAR_OP   shift, and go to state 50

    $default  reduce using rule 26 (OPERATION)


State 31

   36 Expr: ID EQ OPERATION •

    $default  reduce using rule 36 (Expr)


State 32

   39 Expr: ID EQ FuncCall •

    $default  reduce using rule 39 (Expr)


State 33

   48 FuncCall: ID LeftPar @2 • CallParam @3 RightPar

    ID  shift, and go to state 51

    $default  reduce using rule 42 (CallParam)

    CallParam     go to state 52
    CallParamEnd  go to state 53


State 34

   38 Expr: ID LeftBracket NUMBER • RightBracket EQ OPERATION

    RightBracket  shift, and go to state 54


State 35

   30 ParamDecl: TYPE • ID COMMA ParamDecl
   32 ParamDeclEnd: TYPE • ID

    ID  shift, and go to state 55


State 36

   34 Function: TYPE ID LeftPar ParamDecl • $@1 RightPar Block

    $default  reduce using rule 33 ($@1)

    $@1  go to state 56


State 37

   31 ParamDecl: ParamDeclEnd •

    $default  reduce using rule 31 (ParamDecl)


State 38

    9 ArrayDecl: TYPE ID LeftBracket NUMBER • RightBracket SEMICOLON

    RightBracket  shift, and go to state 57


State 39

   20 OPERATION: ID PLUS_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 58


State 40

   21 OPERATION: ID SUB_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 59


State 41

   22 OPERATION: ID MULT_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 60


State 42

   23 OPERATION: ID DIV_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 61


State 43

   24 OPERATION: ID CAR_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 62


State 44

   20 OPERATION: ID • PLUS_OP OPERATION
   21          | ID • SUB_OP OPERATION
   22          | ID • MULT_OP OPERATION
   23          | ID • DIV_OP OPERATION
   24          | ID • CAR_OP OPERATION
   27          | ID •

    PLUS_OP  shift, and go to state 39
    SUB_OP   shift, and go to state 40
    MULT_OP  shift, and go to state 41
    DIV_OP   shift, and go to state 42
    CAR_OP   shift, and go to state 43

    $default  reduce using rule 27 (OPERATION)


State 45

   14 OPERATION: LeftPar OPERATION • RightPar
   25          | LeftPar OPERATION • RightPar PLUS_OP OPERATION

    RightPar  shift, and go to state 63


State 46

   15 OPERATION: NUMBER PLUS_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 64


State 47

   16 OPERATION: NUMBER SUB_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 65


State 48

   17 OPERATION: NUMBER MULT_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 66


State 49

   18 OPERATION: NUMBER DIV_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 67


State 50

   19 OPERATION: NUMBER CAR_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 68


State 51

   43 CallParam: ID • COMMA CallParam
   45 CallParamEnd: ID •

    COMMA  shift, and go to state 69

    $default  reduce using rule 45 (CallParamEnd)


State 52

   48 FuncCall: ID LeftPar @2 CallParam • @3 RightPar

    $default  reduce using rule 47 (@3)

    @3  go to state 70


State 53

   44 CallParam: CallParamEnd •

    $default  reduce using rule 44 (CallParam)


State 54

   38 Expr: ID LeftBracket NUMBER RightBracket • EQ OPERATION

    EQ  shift, and go to state 71


State 55

   30 ParamDecl: TYPE ID • COMMA ParamDecl
   32 ParamDeclEnd: TYPE ID •

    COMMA  shift, and go to state 72

    $default  reduce using rule 32 (ParamDeclEnd)


State 56

   34 Function: TYPE ID LeftPar ParamDecl $@1 • RightPar Block

    RightPar  shift, and go to state 73


State 57

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket • SEMICOLON

    SEMICOLON  shift, and go to state 74


State 58

   20 OPERATION: ID PLUS_OP OPERATION •

    $default  reduce using rule 20 (OPERATION)


State 59

   21 OPERATION: ID SUB_OP OPERATION •

    $default  reduce using rule 21 (OPERATION)


State 60

   22 OPERATION: ID MULT_OP OPERATION •

    $default  reduce using rule 22 (OPERATION)


State 61

   23 OPERATION: ID DIV_OP OPERATION •

    $default  reduce using rule 23 (OPERATION)


State 62

   24 OPERATION: ID CAR_OP OPERATION •

    $default  reduce using rule 24 (OPERATION)


State 63

   14 OPERATION: LeftPar OPERATION RightPar •
   25          | LeftPar OPERATION RightPar • PLUS_OP OPERATION

    PLUS_OP  shift, and go to state 75

    $default  reduce using rule 14 (OPERATION)


State 64

   15 OPERATION: NUMBER PLUS_OP OPERATION •

    $default  reduce using rule 15 (OPERATION)


State 65

   16 OPERATION: NUMBER SUB_OP OPERATION •

    $default  reduce using rule 16 (OPERATION)


State 66

   17 OPERATION: NUMBER MULT_OP OPERATION •

    $default  reduce using rule 17 (OPERATION)


State 67

   18 OPERATION: NUMBER DIV_OP OPERATION •

    $default  reduce using rule 18 (OPERATION)


State 68

   19 OPERATION: NUMBER CAR_OP OPERATION •

    $default  reduce using rule 19 (OPERATION)


State 69

   43 CallParam: ID COMMA • CallParam

    ID  shift, and go to state 51

    $default  reduce using rule 42 (CallParam)

    CallParam     go to state 76
    CallParamEnd  go to state 53


State 70

   48 FuncCall: ID LeftPar @2 CallParam @3 • RightPar

    RightPar  shift, and go to state 77


State 71

   38 Expr: ID LeftBracket NUMBER RightBracket EQ • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 78


State 72

   30 ParamDecl: TYPE ID COMMA • ParamDecl

    TYPE  shift, and go to state 35

    $default  reduce using rule 29 (ParamDecl)

    ParamDecl     go to state 79
    ParamDeclEnd  go to state 37


State 73

   34 Function: TYPE ID LeftPar ParamDecl $@1 RightPar • Block

    LeftCurly  shift, and go to state 80

    Block  go to state 81


State 74

    9 ArrayDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON •

    $default  reduce using rule 9 (ArrayDecl)


State 75

   25 OPERATION: LeftPar OPERATION RightPar PLUS_OP • OPERATION

    ID       shift, and go to state 44
    LeftPar  shift, and go to state 28
    NUMBER   shift, and go to state 30

    OPERATION  go to state 82


State 76

   43 CallParam: ID COMMA CallParam •

    $default  reduce using rule 43 (CallParam)


State 77

   48 FuncCall: ID LeftPar @2 CallParam @3 RightPar •

    $default  reduce using rule 48 (FuncCall)


State 78

   38 Expr: ID LeftBracket NUMBER RightBracket EQ OPERATION •

    $default  reduce using rule 38 (Expr)


State 79

   30 ParamDecl: TYPE ID COMMA ParamDecl •

    $default  reduce using rule 30 (ParamDecl)


State 80

   28 Block: LeftCurly • DeclList RETURN ID SEMICOLON RightCurly

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    TYPE       [reduce using rule 10 (StmtList)]
    ID         [reduce using rule 10 (StmtList)]
    SEMICOLON  [reduce using rule 10 (StmtList)]
    WRITE      [reduce using rule 10 (StmtList)]
    $default   reduce using rule 10 (StmtList)

    DeclList   go to state 83
    Decl       go to state 7
    VarDecl    go to state 8
    ArrayDecl  go to state 9
    StmtList   go to state 10
    Stmt       go to state 11
    Function   go to state 12
    Expr       go to state 13
    FuncCall   go to state 14


State 81

   34 Function: TYPE ID LeftPar ParamDecl $@1 RightPar Block •

    $default  reduce using rule 34 (Function)


State 82

   25 OPERATION: LeftPar OPERATION RightPar PLUS_OP OPERATION •

    $default  reduce using rule 25 (OPERATION)


State 83

   28 Block: LeftCurly DeclList • RETURN ID SEMICOLON RightCurly

    RETURN  shift, and go to state 84


State 84

   28 Block: LeftCurly DeclList RETURN • ID SEMICOLON RightCurly

    ID  shift, and go to state 85


State 85

   28 Block: LeftCurly DeclList RETURN ID • SEMICOLON RightCurly

    SEMICOLON  shift, and go to state 86


State 86

   28 Block: LeftCurly DeclList RETURN ID SEMICOLON • RightCurly

    RightCurly  shift, and go to state 87


State 87

   28 Block: LeftCurly DeclList RETURN ID SEMICOLON RightCurly •

    $default  reduce using rule 28 (Block)
