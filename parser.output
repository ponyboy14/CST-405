Rules useless in parser due to conflicts

   23 Expr: ID EQ ID


State 0 conflicts: 4 shift/reduce
State 7 conflicts: 4 shift/reduce, 2 reduce/reduce
State 10 conflicts: 3 shift/reduce
State 26 conflicts: 1 reduce/reduce
State 46 conflicts: 1 shift/reduce
State 55 conflicts: 4 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: VarDecl
    5     | Function
    6     | StmtList

    7 VarDecl: TYPE ID SEMICOLON
    8        | TYPE ID LeftBracket NUMBER RightBracket SEMICOLON

    9 StmtList: ε
   10         | Stmt StmtList

   11 Stmt: SEMICOLON
   12     | Expr SEMICOLON

   13 ADDITION: ADDITION OP ADDITION
   14         | NUMBER
   15         | ID

   16 Block: LeftCurly DeclList RETURN ID SEMICOLON RightCurly

   17 ParamDecl: ε
   18          | TYPE ID COMMA ParamDecl
   19          | ParamDeclEnd

   20 ParamDeclEnd: TYPE ID

   21 $@1: ε

   22 Function: TYPE ID LeftPar ParamDecl $@1 RightPar Block

   23 Expr: ID EQ ID
   24     | ID EQ ADDITION
   25     | ID LeftBracket NUMBER RightBracket EQ ADDITION
   26     | ID EQ FuncCall
   27     | WRITE ID
   28     | FuncCall

   29 CallParam: ε
   30          | ID COMMA CallParam
   31          | CallParamEnd

   32 CallParamEnd: ID

   33 @2: ε

   34 FuncCall: ID LeftPar CallParam @2 RightPar


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 7 8 18 20 22
    ID <string> (259) 7 8 15 16 18 20 22 23 24 25 26 27 30 32 34
    RETURN <string> (260) 16
    SEMICOLON <char> (261) 7 8 11 12 16
    EQ <char> (262) 23 24 25 26
    OP <char> (263) 13
    LeftPar <char> (264) 22 34
    RightPar <char> (265) 22 34
    LeftCurly <char> (266) 16
    RightCurly <char> (267) 16
    LeftBracket <char> (268) 8 25
    RightBracket <char> (269) 8 25
    COMMA <char> (270) 18 30
    NUMBER <number> (271) 8 14 25
    WRITE <string> (272) 27


Nonterminals, with rules where they appear

    $accept (18)
        on left: 0
    Program <ast> (19)
        on left: 1
        on right: 0
    DeclList <ast> (20)
        on left: 2 3
        on right: 1 2 16
    Decl <ast> (21)
        on left: 4 5 6
        on right: 2 3
    VarDecl <ast> (22)
        on left: 7 8
        on right: 4
    StmtList <ast> (23)
        on left: 9 10
        on right: 6 10
    Stmt <ast> (24)
        on left: 11 12
        on right: 10
    ADDITION <string> (25)
        on left: 13 14 15
        on right: 13 24 25
    Block <ast> (26)
        on left: 16
        on right: 22
    ParamDecl <ast> (27)
        on left: 17 18 19
        on right: 18 22
    ParamDeclEnd <ast> (28)
        on left: 20
        on right: 19
    Function <ast> (29)
        on left: 22
        on right: 5
    $@1 (30)
        on left: 21
        on right: 22
    Expr <ast> (31)
        on left: 23 24 25 26 27 28
        on right: 12
    CallParam <ast> (32)
        on left: 29 30 31
        on right: 30 34
    CallParamEnd <ast> (33)
        on left: 32
        on right: 31
    FuncCall <ast> (34)
        on left: 34
        on right: 26 28
    @2 (35)
        on left: 33
        on right: 34


State 0

    0 $accept: • Program $end

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    TYPE       [reduce using rule 9 (StmtList)]
    ID         [reduce using rule 9 (StmtList)]
    SEMICOLON  [reduce using rule 9 (StmtList)]
    WRITE      [reduce using rule 9 (StmtList)]
    $default   reduce using rule 9 (StmtList)

    Program   go to state 5
    DeclList  go to state 6
    Decl      go to state 7
    VarDecl   go to state 8
    StmtList  go to state 9
    Stmt      go to state 10
    Function  go to state 11
    Expr      go to state 12
    FuncCall  go to state 13


State 1

    7 VarDecl: TYPE • ID SEMICOLON
    8        | TYPE • ID LeftBracket NUMBER RightBracket SEMICOLON
   22 Function: TYPE • ID LeftPar ParamDecl $@1 RightPar Block

    ID  shift, and go to state 14


State 2

   23 Expr: ID • EQ ID
   24     | ID • EQ ADDITION
   25     | ID • LeftBracket NUMBER RightBracket EQ ADDITION
   26     | ID • EQ FuncCall
   34 FuncCall: ID • LeftPar CallParam @2 RightPar

    EQ           shift, and go to state 15
    LeftPar      shift, and go to state 16
    LeftBracket  shift, and go to state 17


State 3

   11 Stmt: SEMICOLON •

    $default  reduce using rule 11 (Stmt)


State 4

   27 Expr: WRITE • ID

    ID  shift, and go to state 18


State 5

    0 $accept: Program • $end

    $end  shift, and go to state 19


State 6

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 7

    2 DeclList: Decl • DeclList
    3         | Decl •

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    $end       reduce using rule 3 (DeclList)
    $end       [reduce using rule 9 (StmtList)]
    TYPE       [reduce using rule 9 (StmtList)]
    ID         [reduce using rule 9 (StmtList)]
    RETURN     reduce using rule 3 (DeclList)
    RETURN     [reduce using rule 9 (StmtList)]
    SEMICOLON  [reduce using rule 9 (StmtList)]
    WRITE      [reduce using rule 9 (StmtList)]
    $default   reduce using rule 3 (DeclList)

    DeclList  go to state 20
    Decl      go to state 7
    VarDecl   go to state 8
    StmtList  go to state 9
    Stmt      go to state 10
    Function  go to state 11
    Expr      go to state 12
    FuncCall  go to state 13


State 8

    4 Decl: VarDecl •

    $default  reduce using rule 4 (Decl)


State 9

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 10

   10 StmtList: Stmt • StmtList

    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    ID         [reduce using rule 9 (StmtList)]
    SEMICOLON  [reduce using rule 9 (StmtList)]
    WRITE      [reduce using rule 9 (StmtList)]
    $default   reduce using rule 9 (StmtList)

    StmtList  go to state 21
    Stmt      go to state 10
    Expr      go to state 12
    FuncCall  go to state 13


State 11

    5 Decl: Function •

    $default  reduce using rule 5 (Decl)


State 12

   12 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 22


State 13

   28 Expr: FuncCall •

    $default  reduce using rule 28 (Expr)


State 14

    7 VarDecl: TYPE ID • SEMICOLON
    8        | TYPE ID • LeftBracket NUMBER RightBracket SEMICOLON
   22 Function: TYPE ID • LeftPar ParamDecl $@1 RightPar Block

    SEMICOLON    shift, and go to state 23
    LeftPar      shift, and go to state 24
    LeftBracket  shift, and go to state 25


State 15

   23 Expr: ID EQ • ID
   24     | ID EQ • ADDITION
   26     | ID EQ • FuncCall

    ID      shift, and go to state 26
    NUMBER  shift, and go to state 27

    ADDITION  go to state 28
    FuncCall  go to state 29


State 16

   34 FuncCall: ID LeftPar • CallParam @2 RightPar

    ID  shift, and go to state 30

    $default  reduce using rule 29 (CallParam)

    CallParam     go to state 31
    CallParamEnd  go to state 32


State 17

   25 Expr: ID LeftBracket • NUMBER RightBracket EQ ADDITION

    NUMBER  shift, and go to state 33


State 18

   27 Expr: WRITE ID •

    $default  reduce using rule 27 (Expr)


State 19

    0 $accept: Program $end •

    $default  accept


State 20

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 21

   10 StmtList: Stmt StmtList •

    $default  reduce using rule 10 (StmtList)


State 22

   12 Stmt: Expr SEMICOLON •

    $default  reduce using rule 12 (Stmt)


State 23

    7 VarDecl: TYPE ID SEMICOLON •

    $default  reduce using rule 7 (VarDecl)


State 24

   22 Function: TYPE ID LeftPar • ParamDecl $@1 RightPar Block

    TYPE  shift, and go to state 34

    $default  reduce using rule 17 (ParamDecl)

    ParamDecl     go to state 35
    ParamDeclEnd  go to state 36


State 25

    8 VarDecl: TYPE ID LeftBracket • NUMBER RightBracket SEMICOLON

    NUMBER  shift, and go to state 37


State 26

   15 ADDITION: ID •
   23 Expr: ID EQ ID •
   34 FuncCall: ID • LeftPar CallParam @2 RightPar

    LeftPar  shift, and go to state 16

    SEMICOLON  reduce using rule 15 (ADDITION)
    SEMICOLON  [reduce using rule 23 (Expr)]
    $default   reduce using rule 15 (ADDITION)


State 27

   14 ADDITION: NUMBER •

    $default  reduce using rule 14 (ADDITION)


State 28

   13 ADDITION: ADDITION • OP ADDITION
   24 Expr: ID EQ ADDITION •

    OP  shift, and go to state 38

    $default  reduce using rule 24 (Expr)


State 29

   26 Expr: ID EQ FuncCall •

    $default  reduce using rule 26 (Expr)


State 30

   30 CallParam: ID • COMMA CallParam
   32 CallParamEnd: ID •

    COMMA  shift, and go to state 39

    $default  reduce using rule 32 (CallParamEnd)


State 31

   34 FuncCall: ID LeftPar CallParam • @2 RightPar

    $default  reduce using rule 33 (@2)

    @2  go to state 40


State 32

   31 CallParam: CallParamEnd •

    $default  reduce using rule 31 (CallParam)


State 33

   25 Expr: ID LeftBracket NUMBER • RightBracket EQ ADDITION

    RightBracket  shift, and go to state 41


State 34

   18 ParamDecl: TYPE • ID COMMA ParamDecl
   20 ParamDeclEnd: TYPE • ID

    ID  shift, and go to state 42


State 35

   22 Function: TYPE ID LeftPar ParamDecl • $@1 RightPar Block

    $default  reduce using rule 21 ($@1)

    $@1  go to state 43


State 36

   19 ParamDecl: ParamDeclEnd •

    $default  reduce using rule 19 (ParamDecl)


State 37

    8 VarDecl: TYPE ID LeftBracket NUMBER • RightBracket SEMICOLON

    RightBracket  shift, and go to state 44


State 38

   13 ADDITION: ADDITION OP • ADDITION

    ID      shift, and go to state 45
    NUMBER  shift, and go to state 27

    ADDITION  go to state 46


State 39

   30 CallParam: ID COMMA • CallParam

    ID  shift, and go to state 30

    $default  reduce using rule 29 (CallParam)

    CallParam     go to state 47
    CallParamEnd  go to state 32


State 40

   34 FuncCall: ID LeftPar CallParam @2 • RightPar

    RightPar  shift, and go to state 48


State 41

   25 Expr: ID LeftBracket NUMBER RightBracket • EQ ADDITION

    EQ  shift, and go to state 49


State 42

   18 ParamDecl: TYPE ID • COMMA ParamDecl
   20 ParamDeclEnd: TYPE ID •

    COMMA  shift, and go to state 50

    $default  reduce using rule 20 (ParamDeclEnd)


State 43

   22 Function: TYPE ID LeftPar ParamDecl $@1 • RightPar Block

    RightPar  shift, and go to state 51


State 44

    8 VarDecl: TYPE ID LeftBracket NUMBER RightBracket • SEMICOLON

    SEMICOLON  shift, and go to state 52


State 45

   15 ADDITION: ID •

    $default  reduce using rule 15 (ADDITION)


State 46

   13 ADDITION: ADDITION • OP ADDITION
   13         | ADDITION OP ADDITION •

    OP  shift, and go to state 38

    OP        [reduce using rule 13 (ADDITION)]
    $default  reduce using rule 13 (ADDITION)


State 47

   30 CallParam: ID COMMA CallParam •

    $default  reduce using rule 30 (CallParam)


State 48

   34 FuncCall: ID LeftPar CallParam @2 RightPar •

    $default  reduce using rule 34 (FuncCall)


State 49

   25 Expr: ID LeftBracket NUMBER RightBracket EQ • ADDITION

    ID      shift, and go to state 45
    NUMBER  shift, and go to state 27

    ADDITION  go to state 53


State 50

   18 ParamDecl: TYPE ID COMMA • ParamDecl

    TYPE  shift, and go to state 34

    $default  reduce using rule 17 (ParamDecl)

    ParamDecl     go to state 54
    ParamDeclEnd  go to state 36


State 51

   22 Function: TYPE ID LeftPar ParamDecl $@1 RightPar • Block

    LeftCurly  shift, and go to state 55

    Block  go to state 56


State 52

    8 VarDecl: TYPE ID LeftBracket NUMBER RightBracket SEMICOLON •

    $default  reduce using rule 8 (VarDecl)


State 53

   13 ADDITION: ADDITION • OP ADDITION
   25 Expr: ID LeftBracket NUMBER RightBracket EQ ADDITION •

    OP  shift, and go to state 38

    $default  reduce using rule 25 (Expr)


State 54

   18 ParamDecl: TYPE ID COMMA ParamDecl •

    $default  reduce using rule 18 (ParamDecl)


State 55

   16 Block: LeftCurly • DeclList RETURN ID SEMICOLON RightCurly

    TYPE       shift, and go to state 1
    ID         shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    WRITE      shift, and go to state 4

    TYPE       [reduce using rule 9 (StmtList)]
    ID         [reduce using rule 9 (StmtList)]
    SEMICOLON  [reduce using rule 9 (StmtList)]
    WRITE      [reduce using rule 9 (StmtList)]
    $default   reduce using rule 9 (StmtList)

    DeclList  go to state 57
    Decl      go to state 7
    VarDecl   go to state 8
    StmtList  go to state 9
    Stmt      go to state 10
    Function  go to state 11
    Expr      go to state 12
    FuncCall  go to state 13


State 56

   22 Function: TYPE ID LeftPar ParamDecl $@1 RightPar Block •

    $default  reduce using rule 22 (Function)


State 57

   16 Block: LeftCurly DeclList • RETURN ID SEMICOLON RightCurly

    RETURN  shift, and go to state 58


State 58

   16 Block: LeftCurly DeclList RETURN • ID SEMICOLON RightCurly

    ID  shift, and go to state 59


State 59

   16 Block: LeftCurly DeclList RETURN ID • SEMICOLON RightCurly

    SEMICOLON  shift, and go to state 60


State 60

   16 Block: LeftCurly DeclList RETURN ID SEMICOLON • RightCurly

    RightCurly  shift, and go to state 61


State 61

   16 Block: LeftCurly DeclList RETURN ID SEMICOLON RightCurly •

    $default  reduce using rule 16 (Block)
